/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeleteTagGroupResponse
import org.openapitools.client.models.GetAccounts4XXResponse
import org.openapitools.client.models.GetTagCampaignRelationshipsResponseCollection
import org.openapitools.client.models.GetTagFlowRelationshipsResponseCollection
import org.openapitools.client.models.GetTagGroupResponse
import org.openapitools.client.models.GetTagGroupResponseCollection
import org.openapitools.client.models.GetTagGroupTagRelationshipsResponseCollection
import org.openapitools.client.models.GetTagListRelationshipsResponseCollection
import org.openapitools.client.models.GetTagResponseCollection
import org.openapitools.client.models.GetTagResponseCollectionCompoundDocument
import org.openapitools.client.models.GetTagResponseCompoundDocument
import org.openapitools.client.models.GetTagSegmentRelationshipsResponseCollection
import org.openapitools.client.models.GetTagTagGroupRelationshipsResponse
import org.openapitools.client.models.PatchTagGroupResponse
import org.openapitools.client.models.PostTagGroupResponse
import org.openapitools.client.models.PostTagResponse
import org.openapitools.client.models.TagCampaignOp
import org.openapitools.client.models.TagCreateQuery
import org.openapitools.client.models.TagFlowOp
import org.openapitools.client.models.TagGroupCreateQuery
import org.openapitools.client.models.TagGroupUpdateQuery
import org.openapitools.client.models.TagListOp
import org.openapitools.client.models.TagSegmentOp
import org.openapitools.client.models.TagUpdateQuery

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TagsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://a.klaviyo.com")
        }
    }

    /**
     * Create Tag
     * Create a tag. An account cannot have more than **500** unique tags.  A tag belongs to a single tag group. If the &#x60;tag_group_id&#x60; is not specified, the tag is added to the account&#39;s default tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCreateQuery 
     * @return PostTagResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTag(revision: kotlin.String = "2024-07-15", tagCreateQuery: TagCreateQuery) : PostTagResponse {
        val localVarResponse = createTagWithHttpInfo(revision = revision, tagCreateQuery = tagCreateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostTagResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tag
     * Create a tag. An account cannot have more than **500** unique tags.  A tag belongs to a single tag group. If the &#x60;tag_group_id&#x60; is not specified, the tag is added to the account&#39;s default tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCreateQuery 
     * @return ApiResponse<PostTagResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagWithHttpInfo(revision: kotlin.String, tagCreateQuery: TagCreateQuery) : ApiResponse<PostTagResponse?> {
        val localVariableConfig = createTagRequestConfig(revision = revision, tagCreateQuery = tagCreateQuery)

        return request<TagCreateQuery, PostTagResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTag
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCreateQuery 
     * @return RequestConfig
     */
    fun createTagRequestConfig(revision: kotlin.String, tagCreateQuery: TagCreateQuery) : RequestConfig<TagCreateQuery> {
        val localVariableBody = tagCreateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tags/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Tag Group
     * Create a tag group. An account cannot have more than **50** unique tag groups.  If &#x60;exclusive&#x60; is not specified &#x60;true&#x60; or &#x60;false&#x60;, the tag group defaults to non-exclusive.  If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagGroupCreateQuery 
     * @return PostTagGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTagGroup(revision: kotlin.String = "2024-07-15", tagGroupCreateQuery: TagGroupCreateQuery) : PostTagGroupResponse {
        val localVarResponse = createTagGroupWithHttpInfo(revision = revision, tagGroupCreateQuery = tagGroupCreateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostTagGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tag Group
     * Create a tag group. An account cannot have more than **50** unique tag groups.  If &#x60;exclusive&#x60; is not specified &#x60;true&#x60; or &#x60;false&#x60;, the tag group defaults to non-exclusive.  If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagGroupCreateQuery 
     * @return ApiResponse<PostTagGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagGroupWithHttpInfo(revision: kotlin.String, tagGroupCreateQuery: TagGroupCreateQuery) : ApiResponse<PostTagGroupResponse?> {
        val localVariableConfig = createTagGroupRequestConfig(revision = revision, tagGroupCreateQuery = tagGroupCreateQuery)

        return request<TagGroupCreateQuery, PostTagGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTagGroup
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagGroupCreateQuery 
     * @return RequestConfig
     */
    fun createTagGroupRequestConfig(revision: kotlin.String, tagGroupCreateQuery: TagGroupCreateQuery) : RequestConfig<TagGroupCreateQuery> {
        val localVariableBody = tagGroupCreateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tag-groups/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Tag Relationships Campaigns
     * Associate a tag with one or more campaigns. Any campaign cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the campaign(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCampaignOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTagRelationshipsCampaigns(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagCampaignOp: TagCampaignOp) : Unit {
        val localVarResponse = createTagRelationshipsCampaignsWithHttpInfo(id = id, revision = revision, tagCampaignOp = tagCampaignOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tag Relationships Campaigns
     * Associate a tag with one or more campaigns. Any campaign cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the campaign(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCampaignOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagRelationshipsCampaignsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagCampaignOp: TagCampaignOp) : ApiResponse<Unit?> {
        val localVariableConfig = createTagRelationshipsCampaignsRequestConfig(id = id, revision = revision, tagCampaignOp = tagCampaignOp)

        return request<TagCampaignOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTagRelationshipsCampaigns
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCampaignOp 
     * @return RequestConfig
     */
    fun createTagRelationshipsCampaignsRequestConfig(id: kotlin.String, revision: kotlin.String, tagCampaignOp: TagCampaignOp) : RequestConfig<TagCampaignOp> {
        val localVariableBody = tagCampaignOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tags/{id}/relationships/campaigns/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Tag Relationships Flows
     * Associate a tag with one or more flows. Any flow cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the flow(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagFlowOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTagRelationshipsFlows(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagFlowOp: TagFlowOp) : Unit {
        val localVarResponse = createTagRelationshipsFlowsWithHttpInfo(id = id, revision = revision, tagFlowOp = tagFlowOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tag Relationships Flows
     * Associate a tag with one or more flows. Any flow cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the flow(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagFlowOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagRelationshipsFlowsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagFlowOp: TagFlowOp) : ApiResponse<Unit?> {
        val localVariableConfig = createTagRelationshipsFlowsRequestConfig(id = id, revision = revision, tagFlowOp = tagFlowOp)

        return request<TagFlowOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTagRelationshipsFlows
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagFlowOp 
     * @return RequestConfig
     */
    fun createTagRelationshipsFlowsRequestConfig(id: kotlin.String, revision: kotlin.String, tagFlowOp: TagFlowOp) : RequestConfig<TagFlowOp> {
        val localVariableBody = tagFlowOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tags/{id}/relationships/flows/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Tag Relationships Lists
     * Associate a tag with one or more lists. Any list cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the lists(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagListOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTagRelationshipsLists(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagListOp: TagListOp) : Unit {
        val localVarResponse = createTagRelationshipsListsWithHttpInfo(id = id, revision = revision, tagListOp = tagListOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tag Relationships Lists
     * Associate a tag with one or more lists. Any list cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the lists(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagListOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagRelationshipsListsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagListOp: TagListOp) : ApiResponse<Unit?> {
        val localVariableConfig = createTagRelationshipsListsRequestConfig(id = id, revision = revision, tagListOp = tagListOp)

        return request<TagListOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTagRelationshipsLists
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagListOp 
     * @return RequestConfig
     */
    fun createTagRelationshipsListsRequestConfig(id: kotlin.String, revision: kotlin.String, tagListOp: TagListOp) : RequestConfig<TagListOp> {
        val localVariableBody = tagListOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tags/{id}/relationships/lists/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Tag Relationships Segments
     * Associate a tag with one or more segments. Any segment cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the segments(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagSegmentOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTagRelationshipsSegments(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagSegmentOp: TagSegmentOp) : Unit {
        val localVarResponse = createTagRelationshipsSegmentsWithHttpInfo(id = id, revision = revision, tagSegmentOp = tagSegmentOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tag Relationships Segments
     * Associate a tag with one or more segments. Any segment cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the segments(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagSegmentOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createTagRelationshipsSegmentsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagSegmentOp: TagSegmentOp) : ApiResponse<Unit?> {
        val localVariableConfig = createTagRelationshipsSegmentsRequestConfig(id = id, revision = revision, tagSegmentOp = tagSegmentOp)

        return request<TagSegmentOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTagRelationshipsSegments
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagSegmentOp 
     * @return RequestConfig
     */
    fun createTagRelationshipsSegmentsRequestConfig(id: kotlin.String, revision: kotlin.String, tagSegmentOp: TagSegmentOp) : RequestConfig<TagSegmentOp> {
        val localVariableBody = tagSegmentOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tags/{id}/relationships/segments/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Tag
     * Delete the tag with the given tag ID. Any associations between the tag and other resources will also be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTag(id: kotlin.String, revision: kotlin.String = "2024-07-15") : Unit {
        val localVarResponse = deleteTagWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tag
     * Delete the tag with the given tag ID. Any associations between the tag and other resources will also be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteTagRequestConfig(id = id, revision = revision)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTag
     *
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun deleteTagRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/tags/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Tag Group
     * Delete the tag group with the given tag group ID.  Any tags inside that tag group, and any associations between those tags and other resources, will also be removed. The default tag group cannot be deleted.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return DeleteTagGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTagGroup(id: kotlin.String, revision: kotlin.String = "2024-07-15") : DeleteTagGroupResponse {
        val localVarResponse = deleteTagGroupWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteTagGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tag Group
     * Delete the tag group with the given tag group ID.  Any tags inside that tag group, and any associations between those tags and other resources, will also be removed. The default tag group cannot be deleted.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<DeleteTagGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagGroupWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<DeleteTagGroupResponse?> {
        val localVariableConfig = deleteTagGroupRequestConfig(id = id, revision = revision)

        return request<Unit, DeleteTagGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTagGroup
     *
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun deleteTagGroupRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/tag-groups/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Tag Relationships Campaigns
     * Remove a tag&#39;s association with one or more campaigns.   Use the request body to pass in the ID(s) of the campaign(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCampaignOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTagRelationshipsCampaigns(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagCampaignOp: TagCampaignOp) : Unit {
        val localVarResponse = deleteTagRelationshipsCampaignsWithHttpInfo(id = id, revision = revision, tagCampaignOp = tagCampaignOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tag Relationships Campaigns
     * Remove a tag&#39;s association with one or more campaigns.   Use the request body to pass in the ID(s) of the campaign(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCampaignOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagRelationshipsCampaignsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagCampaignOp: TagCampaignOp) : ApiResponse<Unit?> {
        val localVariableConfig = deleteTagRelationshipsCampaignsRequestConfig(id = id, revision = revision, tagCampaignOp = tagCampaignOp)

        return request<TagCampaignOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTagRelationshipsCampaigns
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagCampaignOp 
     * @return RequestConfig
     */
    fun deleteTagRelationshipsCampaignsRequestConfig(id: kotlin.String, revision: kotlin.String, tagCampaignOp: TagCampaignOp) : RequestConfig<TagCampaignOp> {
        val localVariableBody = tagCampaignOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/tags/{id}/relationships/campaigns/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Tag Relationships Flows
     * Remove a tag&#39;s association with one or more flows.   Use the request body to pass in the ID(s) of the flows(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagFlowOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTagRelationshipsFlows(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagFlowOp: TagFlowOp) : Unit {
        val localVarResponse = deleteTagRelationshipsFlowsWithHttpInfo(id = id, revision = revision, tagFlowOp = tagFlowOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tag Relationships Flows
     * Remove a tag&#39;s association with one or more flows.   Use the request body to pass in the ID(s) of the flows(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagFlowOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagRelationshipsFlowsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagFlowOp: TagFlowOp) : ApiResponse<Unit?> {
        val localVariableConfig = deleteTagRelationshipsFlowsRequestConfig(id = id, revision = revision, tagFlowOp = tagFlowOp)

        return request<TagFlowOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTagRelationshipsFlows
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagFlowOp 
     * @return RequestConfig
     */
    fun deleteTagRelationshipsFlowsRequestConfig(id: kotlin.String, revision: kotlin.String, tagFlowOp: TagFlowOp) : RequestConfig<TagFlowOp> {
        val localVariableBody = tagFlowOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/tags/{id}/relationships/flows/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Tag Relationships Lists
     * Remove a tag&#39;s association with one or more lists.   Use the request body to pass in the ID(s) of the list(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagListOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTagRelationshipsLists(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagListOp: TagListOp) : Unit {
        val localVarResponse = deleteTagRelationshipsListsWithHttpInfo(id = id, revision = revision, tagListOp = tagListOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tag Relationships Lists
     * Remove a tag&#39;s association with one or more lists.   Use the request body to pass in the ID(s) of the list(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagListOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagRelationshipsListsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagListOp: TagListOp) : ApiResponse<Unit?> {
        val localVariableConfig = deleteTagRelationshipsListsRequestConfig(id = id, revision = revision, tagListOp = tagListOp)

        return request<TagListOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTagRelationshipsLists
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagListOp 
     * @return RequestConfig
     */
    fun deleteTagRelationshipsListsRequestConfig(id: kotlin.String, revision: kotlin.String, tagListOp: TagListOp) : RequestConfig<TagListOp> {
        val localVariableBody = tagListOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/tags/{id}/relationships/lists/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Tag Relationships Segments
     * Remove a tag&#39;s association with one or more segments.   Use the request body to pass in the ID(s) of the segments(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagSegmentOp 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTagRelationshipsSegments(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagSegmentOp: TagSegmentOp) : Unit {
        val localVarResponse = deleteTagRelationshipsSegmentsWithHttpInfo(id = id, revision = revision, tagSegmentOp = tagSegmentOp)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tag Relationships Segments
     * Remove a tag&#39;s association with one or more segments.   Use the request body to pass in the ID(s) of the segments(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:write&#x60; &#x60;tags:write&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagSegmentOp 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTagRelationshipsSegmentsWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagSegmentOp: TagSegmentOp) : ApiResponse<Unit?> {
        val localVariableConfig = deleteTagRelationshipsSegmentsRequestConfig(id = id, revision = revision, tagSegmentOp = tagSegmentOp)

        return request<TagSegmentOp, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTagRelationshipsSegments
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagSegmentOp 
     * @return RequestConfig
     */
    fun deleteTagRelationshipsSegmentsRequestConfig(id: kotlin.String, revision: kotlin.String, tagSegmentOp: TagSegmentOp) : RequestConfig<TagSegmentOp> {
        val localVariableBody = tagSegmentOp
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/tags/{id}/relationships/segments/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTagGroup
     */
     enum class FieldsTagGroupGetTag(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "exclusive") exclusive("exclusive"),
         @Json(name = "default") default("default");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsTag
     */
     enum class FieldsTagGetTag(val value: kotlin.String) {
         @Json(name = "name") name("name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter include
     */
     enum class IncludeGetTag(val value: kotlin.String) {
         @Json(name = "tag-group") tagMinusGroup("tag-group");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Tag
     * Retrieve the tag with the given tag ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return GetTagResponseCompoundDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTag(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTag>? = null, fieldsTag: kotlin.collections.List<FieldsTagGetTag>? = null, include: kotlin.collections.List<IncludeGetTag>? = null) : GetTagResponseCompoundDocument {
        val localVarResponse = getTagWithHttpInfo(id = id, revision = revision, fieldsTagGroup = fieldsTagGroup, fieldsTag = fieldsTag, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagResponseCompoundDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag
     * Retrieve the tag with the given tag ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return ApiResponse<GetTagResponseCompoundDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTag>?, fieldsTag: kotlin.collections.List<FieldsTagGetTag>?, include: kotlin.collections.List<IncludeGetTag>?) : ApiResponse<GetTagResponseCompoundDocument?> {
        val localVariableConfig = getTagRequestConfig(id = id, revision = revision, fieldsTagGroup = fieldsTagGroup, fieldsTag = fieldsTag, include = include)

        return request<Unit, GetTagResponseCompoundDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTag
     *
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return RequestConfig
     */
    fun getTagRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTag>?, fieldsTag: kotlin.collections.List<FieldsTagGetTag>?, include: kotlin.collections.List<IncludeGetTag>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTagGroup != null) {
                    put("fields[tag-group]", toMultiValue(fieldsTagGroup.toList(), "csv"))
                }
                if (fieldsTag != null) {
                    put("fields[tag]", toMultiValue(fieldsTag.toList(), "csv"))
                }
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTagGroup
     */
     enum class FieldsTagGroupGetTagGroup(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "exclusive") exclusive("exclusive"),
         @Json(name = "default") default("default");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Tag Group
     * Retrieve the tag group with the given tag group ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetTagGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagGroup(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagGroup>? = null) : GetTagGroupResponse {
        val localVarResponse = getTagGroupWithHttpInfo(id = id, revision = revision, fieldsTagGroup = fieldsTagGroup)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Group
     * Retrieve the tag group with the given tag group ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetTagGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagGroupWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagGroup>?) : ApiResponse<GetTagGroupResponse?> {
        val localVariableConfig = getTagGroupRequestConfig(id = id, revision = revision, fieldsTagGroup = fieldsTagGroup)

        return request<Unit, GetTagGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagGroup
     *
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getTagGroupRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagGroup>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTagGroup != null) {
                    put("fields[tag-group]", toMultiValue(fieldsTagGroup.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tag-groups/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Tag Group Relationships Tags
     * Returns the tag IDs of all tags inside the given tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetTagGroupTagRelationshipsResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagGroupRelationshipsTags(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetTagGroupTagRelationshipsResponseCollection {
        val localVarResponse = getTagGroupRelationshipsTagsWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagGroupTagRelationshipsResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Group Relationships Tags
     * Returns the tag IDs of all tags inside the given tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetTagGroupTagRelationshipsResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagGroupRelationshipsTagsWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetTagGroupTagRelationshipsResponseCollection?> {
        val localVariableConfig = getTagGroupRelationshipsTagsRequestConfig(id = id, revision = revision)

        return request<Unit, GetTagGroupTagRelationshipsResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagGroupRelationshipsTags
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getTagGroupRelationshipsTagsRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tag-groups/{id}/relationships/tags/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTag
     */
     enum class FieldsTagGetTagGroupTags(val value: kotlin.String) {
         @Json(name = "name") name("name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Tag Group Tags
     * Return the tags for a given tag group ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetTagResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagGroupTags(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsTag: kotlin.collections.List<FieldsTagGetTagGroupTags>? = null) : GetTagResponseCollection {
        val localVarResponse = getTagGroupTagsWithHttpInfo(id = id, revision = revision, fieldsTag = fieldsTag)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Group Tags
     * Return the tags for a given tag group ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetTagResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagGroupTagsWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsTag: kotlin.collections.List<FieldsTagGetTagGroupTags>?) : ApiResponse<GetTagResponseCollection?> {
        val localVariableConfig = getTagGroupTagsRequestConfig(id = id, revision = revision, fieldsTag = fieldsTag)

        return request<Unit, GetTagResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagGroupTags
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getTagGroupTagsRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsTag: kotlin.collections.List<FieldsTagGetTagGroupTags>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTag != null) {
                    put("fields[tag]", toMultiValue(fieldsTag.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tag-groups/{id}/tags/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTagGroup
     */
     enum class FieldsTagGroupGetTagGroups(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "exclusive") exclusive("exclusive"),
         @Json(name = "default") default("default");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter sort
     */
     enum class SortGetTagGroups(val value: kotlin.String) {
         @Json(name = "id") id("id"),
         @Json(name = "-id") MinusId("-id"),
         @Json(name = "name") name("name"),
         @Json(name = "-name") MinusName("-name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Tag Groups
     * List all tag groups in an account. Every account has one default tag group.  Tag groups can be filtered by &#x60;name&#x60;, &#x60;exclusive&#x60;, and &#x60;default&#x60;, and sorted by &#x60;name&#x60; or &#x60;id&#x60; in ascending or descending order.  Returns a maximum of 25 tag groups per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;exclusive&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;default&#x60;: &#x60;equals&#x60; (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return GetTagGroupResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagGroups(revision: kotlin.String = "2024-07-15", fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagGroups>? = null, filter: kotlin.String? = null, pageCursor: kotlin.String? = null, sort: SortGetTagGroups? = null) : GetTagGroupResponseCollection {
        val localVarResponse = getTagGroupsWithHttpInfo(revision = revision, fieldsTagGroup = fieldsTagGroup, filter = filter, pageCursor = pageCursor, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagGroupResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Groups
     * List all tag groups in an account. Every account has one default tag group.  Tag groups can be filtered by &#x60;name&#x60;, &#x60;exclusive&#x60;, and &#x60;default&#x60;, and sorted by &#x60;name&#x60; or &#x60;id&#x60; in ascending or descending order.  Returns a maximum of 25 tag groups per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;exclusive&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;default&#x60;: &#x60;equals&#x60; (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return ApiResponse<GetTagGroupResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagGroupsWithHttpInfo(revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagGroups>?, filter: kotlin.String?, pageCursor: kotlin.String?, sort: SortGetTagGroups?) : ApiResponse<GetTagGroupResponseCollection?> {
        val localVariableConfig = getTagGroupsRequestConfig(revision = revision, fieldsTagGroup = fieldsTagGroup, filter = filter, pageCursor = pageCursor, sort = sort)

        return request<Unit, GetTagGroupResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagGroups
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;exclusive&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;default&#x60;: &#x60;equals&#x60; (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return RequestConfig
     */
    fun getTagGroupsRequestConfig(revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagGroups>?, filter: kotlin.String?, pageCursor: kotlin.String?, sort: SortGetTagGroups?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTagGroup != null) {
                    put("fields[tag-group]", toMultiValue(fieldsTagGroup.toList(), "csv"))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (pageCursor != null) {
                    put("page[cursor]", listOf(pageCursor.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tag-groups/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Tag Relationships Campaigns
     * Returns the IDs of all campaigns associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetTagCampaignRelationshipsResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagRelationshipsCampaigns(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetTagCampaignRelationshipsResponseCollection {
        val localVarResponse = getTagRelationshipsCampaignsWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagCampaignRelationshipsResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Relationships Campaigns
     * Returns the IDs of all campaigns associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetTagCampaignRelationshipsResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagRelationshipsCampaignsWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetTagCampaignRelationshipsResponseCollection?> {
        val localVariableConfig = getTagRelationshipsCampaignsRequestConfig(id = id, revision = revision)

        return request<Unit, GetTagCampaignRelationshipsResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagRelationshipsCampaigns
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getTagRelationshipsCampaignsRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/relationships/campaigns/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Tag Relationships Flows
     * Returns the IDs of all flows associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetTagFlowRelationshipsResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagRelationshipsFlows(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetTagFlowRelationshipsResponseCollection {
        val localVarResponse = getTagRelationshipsFlowsWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagFlowRelationshipsResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Relationships Flows
     * Returns the IDs of all flows associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetTagFlowRelationshipsResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagRelationshipsFlowsWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetTagFlowRelationshipsResponseCollection?> {
        val localVariableConfig = getTagRelationshipsFlowsRequestConfig(id = id, revision = revision)

        return request<Unit, GetTagFlowRelationshipsResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagRelationshipsFlows
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getTagRelationshipsFlowsRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/relationships/flows/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Tag Relationships Lists
     * Returns the IDs of all lists associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetTagListRelationshipsResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagRelationshipsLists(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetTagListRelationshipsResponseCollection {
        val localVarResponse = getTagRelationshipsListsWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagListRelationshipsResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Relationships Lists
     * Returns the IDs of all lists associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetTagListRelationshipsResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagRelationshipsListsWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetTagListRelationshipsResponseCollection?> {
        val localVariableConfig = getTagRelationshipsListsRequestConfig(id = id, revision = revision)

        return request<Unit, GetTagListRelationshipsResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagRelationshipsLists
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getTagRelationshipsListsRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/relationships/lists/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Tag Relationships Segments
     * Returns the IDs of all segments associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetTagSegmentRelationshipsResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagRelationshipsSegments(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetTagSegmentRelationshipsResponseCollection {
        val localVarResponse = getTagRelationshipsSegmentsWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagSegmentRelationshipsResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Relationships Segments
     * Returns the IDs of all segments associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetTagSegmentRelationshipsResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagRelationshipsSegmentsWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetTagSegmentRelationshipsResponseCollection?> {
        val localVariableConfig = getTagRelationshipsSegmentsRequestConfig(id = id, revision = revision)

        return request<Unit, GetTagSegmentRelationshipsResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagRelationshipsSegments
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getTagRelationshipsSegmentsRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/relationships/segments/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Tag Relationships Tag Group
     * Returns the id of the tag group related to the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetTagTagGroupRelationshipsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagRelationshipsTagGroup(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetTagTagGroupRelationshipsResponse {
        val localVarResponse = getTagRelationshipsTagGroupWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagTagGroupRelationshipsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Relationships Tag Group
     * Returns the id of the tag group related to the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetTagTagGroupRelationshipsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagRelationshipsTagGroupWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetTagTagGroupRelationshipsResponse?> {
        val localVariableConfig = getTagRelationshipsTagGroupRequestConfig(id = id, revision = revision)

        return request<Unit, GetTagTagGroupRelationshipsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagRelationshipsTagGroup
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getTagRelationshipsTagGroupRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/relationships/tag-group/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTagGroup
     */
     enum class FieldsTagGroupGetTagTagGroup(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "exclusive") exclusive("exclusive"),
         @Json(name = "default") default("default");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Tag Tag Group
     * Returns the tag group resource for a given tag ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetTagGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTagTagGroup(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagTagGroup>? = null) : GetTagGroupResponse {
        val localVarResponse = getTagTagGroupWithHttpInfo(id = id, revision = revision, fieldsTagGroup = fieldsTagGroup)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tag Tag Group
     * Returns the tag group resource for a given tag ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetTagGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagTagGroupWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagTagGroup>?) : ApiResponse<GetTagGroupResponse?> {
        val localVariableConfig = getTagTagGroupRequestConfig(id = id, revision = revision, fieldsTagGroup = fieldsTagGroup)

        return request<Unit, GetTagGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTagTagGroup
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getTagTagGroupRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTagTagGroup>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTagGroup != null) {
                    put("fields[tag-group]", toMultiValue(fieldsTagGroup.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/{id}/tag-group/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTagGroup
     */
     enum class FieldsTagGroupGetTags(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "exclusive") exclusive("exclusive"),
         @Json(name = "default") default("default");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsTag
     */
     enum class FieldsTagGetTags(val value: kotlin.String) {
         @Json(name = "name") name("name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter include
     */
     enum class IncludeGetTags(val value: kotlin.String) {
         @Json(name = "tag-group") tagMinusGroup("tag-group");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter sort
     */
     enum class SortGetTags(val value: kotlin.String) {
         @Json(name = "id") id("id"),
         @Json(name = "-id") MinusId("-id"),
         @Json(name = "name") name("name"),
         @Json(name = "-name") MinusName("-name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Tags
     * List all tags in an account.  Tags can be filtered by &#x60;name&#x60;, and sorted by &#x60;name&#x60; or &#x60;id&#x60; in ascending or descending order.  Returns a maximum of 50 tags per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60; (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return GetTagResponseCollectionCompoundDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTags(revision: kotlin.String = "2024-07-15", fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTags>? = null, fieldsTag: kotlin.collections.List<FieldsTagGetTags>? = null, filter: kotlin.String? = null, include: kotlin.collections.List<IncludeGetTags>? = null, pageCursor: kotlin.String? = null, sort: SortGetTags? = null) : GetTagResponseCollectionCompoundDocument {
        val localVarResponse = getTagsWithHttpInfo(revision = revision, fieldsTagGroup = fieldsTagGroup, fieldsTag = fieldsTag, filter = filter, include = include, pageCursor = pageCursor, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagResponseCollectionCompoundDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Tags
     * List all tags in an account.  Tags can be filtered by &#x60;name&#x60;, and sorted by &#x60;name&#x60; or &#x60;id&#x60; in ascending or descending order.  Returns a maximum of 50 tags per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60; (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return ApiResponse<GetTagResponseCollectionCompoundDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagsWithHttpInfo(revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTags>?, fieldsTag: kotlin.collections.List<FieldsTagGetTags>?, filter: kotlin.String?, include: kotlin.collections.List<IncludeGetTags>?, pageCursor: kotlin.String?, sort: SortGetTags?) : ApiResponse<GetTagResponseCollectionCompoundDocument?> {
        val localVariableConfig = getTagsRequestConfig(revision = revision, fieldsTagGroup = fieldsTagGroup, fieldsTag = fieldsTag, filter = filter, include = include, pageCursor = pageCursor, sort = sort)

        return request<Unit, GetTagResponseCollectionCompoundDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTags
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60; (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return RequestConfig
     */
    fun getTagsRequestConfig(revision: kotlin.String, fieldsTagGroup: kotlin.collections.List<FieldsTagGroupGetTags>?, fieldsTag: kotlin.collections.List<FieldsTagGetTags>?, filter: kotlin.String?, include: kotlin.collections.List<IncludeGetTags>?, pageCursor: kotlin.String?, sort: SortGetTags?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTagGroup != null) {
                    put("fields[tag-group]", toMultiValue(fieldsTagGroup.toList(), "csv"))
                }
                if (fieldsTag != null) {
                    put("fields[tag]", toMultiValue(fieldsTag.toList(), "csv"))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "csv"))
                }
                if (pageCursor != null) {
                    put("page[cursor]", listOf(pageCursor.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tags/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Tag
     * Update the tag with the given tag ID.  Only a tag&#39;s &#x60;name&#x60; can be changed. A tag cannot be moved from one tag group to another.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagUpdateQuery 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateTag(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagUpdateQuery: TagUpdateQuery) : Unit {
        val localVarResponse = updateTagWithHttpInfo(id = id, revision = revision, tagUpdateQuery = tagUpdateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Tag
     * Update the tag with the given tag ID.  Only a tag&#39;s &#x60;name&#x60; can be changed. A tag cannot be moved from one tag group to another.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagUpdateQuery 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateTagWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagUpdateQuery: TagUpdateQuery) : ApiResponse<Unit?> {
        val localVariableConfig = updateTagRequestConfig(id = id, revision = revision, tagUpdateQuery = tagUpdateQuery)

        return request<TagUpdateQuery, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateTag
     *
     * @param id The Tag ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagUpdateQuery 
     * @return RequestConfig
     */
    fun updateTagRequestConfig(id: kotlin.String, revision: kotlin.String, tagUpdateQuery: TagUpdateQuery) : RequestConfig<TagUpdateQuery> {
        val localVariableBody = tagUpdateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/tags/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Tag Group
     * Update the tag group with the given tag group ID.  Only a tag group&#39;s &#x60;name&#x60; can be changed. A tag group&#39;s &#x60;exclusive&#x60; or &#x60;default&#x60; value cannot be changed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagGroupUpdateQuery 
     * @return PatchTagGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateTagGroup(id: kotlin.String, revision: kotlin.String = "2024-07-15", tagGroupUpdateQuery: TagGroupUpdateQuery) : PatchTagGroupResponse {
        val localVarResponse = updateTagGroupWithHttpInfo(id = id, revision = revision, tagGroupUpdateQuery = tagGroupUpdateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PatchTagGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Tag Group
     * Update the tag group with the given tag group ID.  Only a tag group&#39;s &#x60;name&#x60; can be changed. A tag group&#39;s &#x60;exclusive&#x60; or &#x60;default&#x60; value cannot be changed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagGroupUpdateQuery 
     * @return ApiResponse<PatchTagGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateTagGroupWithHttpInfo(id: kotlin.String, revision: kotlin.String, tagGroupUpdateQuery: TagGroupUpdateQuery) : ApiResponse<PatchTagGroupResponse?> {
        val localVariableConfig = updateTagGroupRequestConfig(id = id, revision = revision, tagGroupUpdateQuery = tagGroupUpdateQuery)

        return request<TagGroupUpdateQuery, PatchTagGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateTagGroup
     *
     * @param id The Tag Group ID
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param tagGroupUpdateQuery 
     * @return RequestConfig
     */
    fun updateTagGroupRequestConfig(id: kotlin.String, revision: kotlin.String, tagGroupUpdateQuery: TagGroupUpdateQuery) : RequestConfig<TagGroupUpdateQuery> {
        val localVariableBody = tagGroupUpdateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/tag-groups/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
