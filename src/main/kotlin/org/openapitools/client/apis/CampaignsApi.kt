/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CampaignCloneQuery
import org.openapitools.client.models.CampaignCreateQuery
import org.openapitools.client.models.CampaignMessageAssignTemplateQuery
import org.openapitools.client.models.CampaignMessagePartialUpdateQuery
import org.openapitools.client.models.CampaignPartialUpdateQuery
import org.openapitools.client.models.CampaignRecipientEstimationJobCreateQuery
import org.openapitools.client.models.CampaignSendJobCreateQuery
import org.openapitools.client.models.CampaignSendJobPartialUpdateQuery
import org.openapitools.client.models.GetAccounts4XXResponse
import org.openapitools.client.models.GetCampaignMessageCampaignRelationshipListResponse
import org.openapitools.client.models.GetCampaignMessageResponseCollectionCompoundDocument
import org.openapitools.client.models.GetCampaignMessageResponseCompoundDocument
import org.openapitools.client.models.GetCampaignMessageTemplateRelationshipListResponse
import org.openapitools.client.models.GetCampaignMessagesRelationshipListResponseCollection
import org.openapitools.client.models.GetCampaignRecipientEstimationJobResponse
import org.openapitools.client.models.GetCampaignRecipientEstimationResponse
import org.openapitools.client.models.GetCampaignResponse
import org.openapitools.client.models.GetCampaignResponseCollectionCompoundDocument
import org.openapitools.client.models.GetCampaignResponseCompoundDocument
import org.openapitools.client.models.GetCampaignSendJobResponse
import org.openapitools.client.models.GetCampaignTagRelationshipListResponseCollection
import org.openapitools.client.models.GetTagResponseCollection
import org.openapitools.client.models.GetTemplateResponse
import org.openapitools.client.models.PatchCampaignMessageResponse
import org.openapitools.client.models.PatchCampaignResponse
import org.openapitools.client.models.PostCampaignMessageResponse
import org.openapitools.client.models.PostCampaignRecipientEstimationJobResponse
import org.openapitools.client.models.PostCampaignResponse
import org.openapitools.client.models.PostCampaignSendJobResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CampaignsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://a.klaviyo.com")
        }
    }

    /**
     * Create Campaign
     * Creates a campaign given a set of parameters, then returns it.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignCreateQuery Creates a campaign from parameters
     * @return PostCampaignResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCampaign(revision: kotlin.String = "2024-07-15", campaignCreateQuery: CampaignCreateQuery) : PostCampaignResponse {
        val localVarResponse = createCampaignWithHttpInfo(revision = revision, campaignCreateQuery = campaignCreateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostCampaignResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Campaign
     * Creates a campaign given a set of parameters, then returns it.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignCreateQuery Creates a campaign from parameters
     * @return ApiResponse<PostCampaignResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCampaignWithHttpInfo(revision: kotlin.String, campaignCreateQuery: CampaignCreateQuery) : ApiResponse<PostCampaignResponse?> {
        val localVariableConfig = createCampaignRequestConfig(revision = revision, campaignCreateQuery = campaignCreateQuery)

        return request<CampaignCreateQuery, PostCampaignResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCampaign
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignCreateQuery Creates a campaign from parameters
     * @return RequestConfig
     */
    fun createCampaignRequestConfig(revision: kotlin.String, campaignCreateQuery: CampaignCreateQuery) : RequestConfig<CampaignCreateQuery> {
        val localVariableBody = campaignCreateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/campaigns/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Campaign Clone
     * Clones an existing campaign, returning a new campaign based on the original with a new ID and name.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignCloneQuery Clones a campaign from an existing campaign
     * @return PostCampaignResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCampaignClone(revision: kotlin.String = "2024-07-15", campaignCloneQuery: CampaignCloneQuery) : PostCampaignResponse {
        val localVarResponse = createCampaignCloneWithHttpInfo(revision = revision, campaignCloneQuery = campaignCloneQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostCampaignResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Campaign Clone
     * Clones an existing campaign, returning a new campaign based on the original with a new ID and name.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignCloneQuery Clones a campaign from an existing campaign
     * @return ApiResponse<PostCampaignResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCampaignCloneWithHttpInfo(revision: kotlin.String, campaignCloneQuery: CampaignCloneQuery) : ApiResponse<PostCampaignResponse?> {
        val localVariableConfig = createCampaignCloneRequestConfig(revision = revision, campaignCloneQuery = campaignCloneQuery)

        return request<CampaignCloneQuery, PostCampaignResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCampaignClone
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignCloneQuery Clones a campaign from an existing campaign
     * @return RequestConfig
     */
    fun createCampaignCloneRequestConfig(revision: kotlin.String, campaignCloneQuery: CampaignCloneQuery) : RequestConfig<CampaignCloneQuery> {
        val localVariableBody = campaignCloneQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/campaign-clone/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Assign Campaign Message Template
     * Creates a non-reusable version of the template and assigns it to the message.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignMessageAssignTemplateQuery Takes a reusable template, clones it, and assigns the non-reusable clone to the message.
     * @return PostCampaignMessageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCampaignMessageAssignTemplate(revision: kotlin.String = "2024-07-15", campaignMessageAssignTemplateQuery: CampaignMessageAssignTemplateQuery) : PostCampaignMessageResponse {
        val localVarResponse = createCampaignMessageAssignTemplateWithHttpInfo(revision = revision, campaignMessageAssignTemplateQuery = campaignMessageAssignTemplateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostCampaignMessageResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Assign Campaign Message Template
     * Creates a non-reusable version of the template and assigns it to the message.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignMessageAssignTemplateQuery Takes a reusable template, clones it, and assigns the non-reusable clone to the message.
     * @return ApiResponse<PostCampaignMessageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCampaignMessageAssignTemplateWithHttpInfo(revision: kotlin.String, campaignMessageAssignTemplateQuery: CampaignMessageAssignTemplateQuery) : ApiResponse<PostCampaignMessageResponse?> {
        val localVariableConfig = createCampaignMessageAssignTemplateRequestConfig(revision = revision, campaignMessageAssignTemplateQuery = campaignMessageAssignTemplateQuery)

        return request<CampaignMessageAssignTemplateQuery, PostCampaignMessageResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCampaignMessageAssignTemplate
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignMessageAssignTemplateQuery Takes a reusable template, clones it, and assigns the non-reusable clone to the message.
     * @return RequestConfig
     */
    fun createCampaignMessageAssignTemplateRequestConfig(revision: kotlin.String, campaignMessageAssignTemplateQuery: CampaignMessageAssignTemplateQuery) : RequestConfig<CampaignMessageAssignTemplateQuery> {
        val localVariableBody = campaignMessageAssignTemplateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/campaign-message-assign-template/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Campaign Recipient Estimation Job
     * Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignRecipientEstimationJobCreateQuery Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign.
     * @return PostCampaignRecipientEstimationJobResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCampaignRecipientEstimationJob(revision: kotlin.String = "2024-07-15", campaignRecipientEstimationJobCreateQuery: CampaignRecipientEstimationJobCreateQuery) : PostCampaignRecipientEstimationJobResponse {
        val localVarResponse = createCampaignRecipientEstimationJobWithHttpInfo(revision = revision, campaignRecipientEstimationJobCreateQuery = campaignRecipientEstimationJobCreateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostCampaignRecipientEstimationJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Campaign Recipient Estimation Job
     * Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignRecipientEstimationJobCreateQuery Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign.
     * @return ApiResponse<PostCampaignRecipientEstimationJobResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCampaignRecipientEstimationJobWithHttpInfo(revision: kotlin.String, campaignRecipientEstimationJobCreateQuery: CampaignRecipientEstimationJobCreateQuery) : ApiResponse<PostCampaignRecipientEstimationJobResponse?> {
        val localVariableConfig = createCampaignRecipientEstimationJobRequestConfig(revision = revision, campaignRecipientEstimationJobCreateQuery = campaignRecipientEstimationJobCreateQuery)

        return request<CampaignRecipientEstimationJobCreateQuery, PostCampaignRecipientEstimationJobResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCampaignRecipientEstimationJob
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignRecipientEstimationJobCreateQuery Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign.
     * @return RequestConfig
     */
    fun createCampaignRecipientEstimationJobRequestConfig(revision: kotlin.String, campaignRecipientEstimationJobCreateQuery: CampaignRecipientEstimationJobCreateQuery) : RequestConfig<CampaignRecipientEstimationJobCreateQuery> {
        val localVariableBody = campaignRecipientEstimationJobCreateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/campaign-recipient-estimation-jobs/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Campaign Send Job
     * Trigger a campaign to send asynchronously&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignSendJobCreateQuery Trigger the campaign to send asynchronously
     * @return PostCampaignSendJobResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCampaignSendJob(revision: kotlin.String = "2024-07-15", campaignSendJobCreateQuery: CampaignSendJobCreateQuery) : PostCampaignSendJobResponse {
        val localVarResponse = createCampaignSendJobWithHttpInfo(revision = revision, campaignSendJobCreateQuery = campaignSendJobCreateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostCampaignSendJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Campaign Send Job
     * Trigger a campaign to send asynchronously&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignSendJobCreateQuery Trigger the campaign to send asynchronously
     * @return ApiResponse<PostCampaignSendJobResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCampaignSendJobWithHttpInfo(revision: kotlin.String, campaignSendJobCreateQuery: CampaignSendJobCreateQuery) : ApiResponse<PostCampaignSendJobResponse?> {
        val localVariableConfig = createCampaignSendJobRequestConfig(revision = revision, campaignSendJobCreateQuery = campaignSendJobCreateQuery)

        return request<CampaignSendJobCreateQuery, PostCampaignSendJobResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCampaignSendJob
     *
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignSendJobCreateQuery Trigger the campaign to send asynchronously
     * @return RequestConfig
     */
    fun createCampaignSendJobRequestConfig(revision: kotlin.String, campaignSendJobCreateQuery: CampaignSendJobCreateQuery) : RequestConfig<CampaignSendJobCreateQuery> {
        val localVariableBody = campaignSendJobCreateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/campaign-send-jobs/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Campaign
     * Delete a campaign with the given campaign ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The campaign ID to be deleted
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteCampaign(id: kotlin.String, revision: kotlin.String = "2024-07-15") : Unit {
        val localVarResponse = deleteCampaignWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Campaign
     * Delete a campaign with the given campaign ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The campaign ID to be deleted
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteCampaignWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteCampaignRequestConfig(id = id, revision = revision)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteCampaign
     *
     * @param id The campaign ID to be deleted
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun deleteCampaignRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/campaigns/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignMessage
     */
     enum class FieldsCampaignMessageGetCampaign(val value: kotlin.String) {
         @Json(name = "label") label("label"),
         @Json(name = "channel") channel("channel"),
         @Json(name = "content") content("content"),
         @Json(name = "send_times") send_times("send_times"),
         @Json(name = "render_options") render_options("render_options"),
         @Json(name = "render_options.shorten_links") render_optionsPeriodShorten_links("render_options.shorten_links"),
         @Json(name = "render_options.add_org_prefix") render_optionsPeriodAdd_org_prefix("render_options.add_org_prefix"),
         @Json(name = "render_options.add_info_link") render_optionsPeriodAdd_info_link("render_options.add_info_link"),
         @Json(name = "render_options.add_opt_out_language") render_optionsPeriodAdd_opt_out_language("render_options.add_opt_out_language"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "updated_at") updated_at("updated_at");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsCampaign
     */
     enum class FieldsCampaignGetCampaign(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "status") status("status"),
         @Json(name = "archived") archived("archived"),
         @Json(name = "audiences") audiences("audiences"),
         @Json(name = "audiences.included") audiencesPeriodIncluded("audiences.included"),
         @Json(name = "audiences.excluded") audiencesPeriodExcluded("audiences.excluded"),
         @Json(name = "send_options") send_options("send_options"),
         @Json(name = "tracking_options") tracking_options("tracking_options"),
         @Json(name = "send_strategy") send_strategy("send_strategy"),
         @Json(name = "send_strategy.method") send_strategyPeriodMethod("send_strategy.method"),
         @Json(name = "send_strategy.options_static") send_strategyPeriodOptions_static("send_strategy.options_static"),
         @Json(name = "send_strategy.options_static.datetime") send_strategyPeriodOptions_staticPeriodDatetime("send_strategy.options_static.datetime"),
         @Json(name = "send_strategy.options_static.is_local") send_strategyPeriodOptions_staticPeriodIs_local("send_strategy.options_static.is_local"),
         @Json(name = "send_strategy.options_static.send_past_recipients_immediately") send_strategyPeriodOptions_staticPeriodSend_past_recipients_immediately("send_strategy.options_static.send_past_recipients_immediately"),
         @Json(name = "send_strategy.options_throttled") send_strategyPeriodOptions_throttled("send_strategy.options_throttled"),
         @Json(name = "send_strategy.options_throttled.datetime") send_strategyPeriodOptions_throttledPeriodDatetime("send_strategy.options_throttled.datetime"),
         @Json(name = "send_strategy.options_throttled.throttle_percentage") send_strategyPeriodOptions_throttledPeriodThrottle_percentage("send_strategy.options_throttled.throttle_percentage"),
         @Json(name = "send_strategy.options_sto") send_strategyPeriodOptions_sto("send_strategy.options_sto"),
         @Json(name = "send_strategy.options_sto.date") send_strategyPeriodOptions_stoPeriodDate("send_strategy.options_sto.date"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "scheduled_at") scheduled_at("scheduled_at"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "send_time") send_time("send_time");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsTag
     */
     enum class FieldsTagGetCampaign(val value: kotlin.String) {
         @Json(name = "name") name("name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter include
     */
     enum class IncludeGetCampaign(val value: kotlin.String) {
         @Json(name = "campaign-messages") campaignMinusMessages("campaign-messages"),
         @Json(name = "tags") tags("tags");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign
     * Returns a specific campaign based on a required id.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The campaign ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return GetCampaignResponseCompoundDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaign(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaign>? = null, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaign>? = null, fieldsTag: kotlin.collections.List<FieldsTagGetCampaign>? = null, include: kotlin.collections.List<IncludeGetCampaign>? = null) : GetCampaignResponseCompoundDocument {
        val localVarResponse = getCampaignWithHttpInfo(id = id, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTag = fieldsTag, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignResponseCompoundDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign
     * Returns a specific campaign based on a required id.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The campaign ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return ApiResponse<GetCampaignResponseCompoundDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaign>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaign>?, fieldsTag: kotlin.collections.List<FieldsTagGetCampaign>?, include: kotlin.collections.List<IncludeGetCampaign>?) : ApiResponse<GetCampaignResponseCompoundDocument?> {
        val localVariableConfig = getCampaignRequestConfig(id = id, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTag = fieldsTag, include = include)

        return request<Unit, GetCampaignResponseCompoundDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaign
     *
     * @param id The campaign ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return RequestConfig
     */
    fun getCampaignRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaign>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaign>?, fieldsTag: kotlin.collections.List<FieldsTagGetCampaign>?, include: kotlin.collections.List<IncludeGetCampaign>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaignMessage != null) {
                    put("fields[campaign-message]", toMultiValue(fieldsCampaignMessage.toList(), "csv"))
                }
                if (fieldsCampaign != null) {
                    put("fields[campaign]", toMultiValue(fieldsCampaign.toList(), "csv"))
                }
                if (fieldsTag != null) {
                    put("fields[tag]", toMultiValue(fieldsTag.toList(), "csv"))
                }
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaigns/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignMessage
     */
     enum class FieldsCampaignMessageGetCampaignCampaignMessages(val value: kotlin.String) {
         @Json(name = "label") label("label"),
         @Json(name = "channel") channel("channel"),
         @Json(name = "content") content("content"),
         @Json(name = "send_times") send_times("send_times"),
         @Json(name = "render_options") render_options("render_options"),
         @Json(name = "render_options.shorten_links") render_optionsPeriodShorten_links("render_options.shorten_links"),
         @Json(name = "render_options.add_org_prefix") render_optionsPeriodAdd_org_prefix("render_options.add_org_prefix"),
         @Json(name = "render_options.add_info_link") render_optionsPeriodAdd_info_link("render_options.add_info_link"),
         @Json(name = "render_options.add_opt_out_language") render_optionsPeriodAdd_opt_out_language("render_options.add_opt_out_language"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "updated_at") updated_at("updated_at");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsCampaign
     */
     enum class FieldsCampaignGetCampaignCampaignMessages(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "status") status("status"),
         @Json(name = "archived") archived("archived"),
         @Json(name = "audiences") audiences("audiences"),
         @Json(name = "audiences.included") audiencesPeriodIncluded("audiences.included"),
         @Json(name = "audiences.excluded") audiencesPeriodExcluded("audiences.excluded"),
         @Json(name = "send_options") send_options("send_options"),
         @Json(name = "tracking_options") tracking_options("tracking_options"),
         @Json(name = "send_strategy") send_strategy("send_strategy"),
         @Json(name = "send_strategy.method") send_strategyPeriodMethod("send_strategy.method"),
         @Json(name = "send_strategy.options_static") send_strategyPeriodOptions_static("send_strategy.options_static"),
         @Json(name = "send_strategy.options_static.datetime") send_strategyPeriodOptions_staticPeriodDatetime("send_strategy.options_static.datetime"),
         @Json(name = "send_strategy.options_static.is_local") send_strategyPeriodOptions_staticPeriodIs_local("send_strategy.options_static.is_local"),
         @Json(name = "send_strategy.options_static.send_past_recipients_immediately") send_strategyPeriodOptions_staticPeriodSend_past_recipients_immediately("send_strategy.options_static.send_past_recipients_immediately"),
         @Json(name = "send_strategy.options_throttled") send_strategyPeriodOptions_throttled("send_strategy.options_throttled"),
         @Json(name = "send_strategy.options_throttled.datetime") send_strategyPeriodOptions_throttledPeriodDatetime("send_strategy.options_throttled.datetime"),
         @Json(name = "send_strategy.options_throttled.throttle_percentage") send_strategyPeriodOptions_throttledPeriodThrottle_percentage("send_strategy.options_throttled.throttle_percentage"),
         @Json(name = "send_strategy.options_sto") send_strategyPeriodOptions_sto("send_strategy.options_sto"),
         @Json(name = "send_strategy.options_sto.date") send_strategyPeriodOptions_stoPeriodDate("send_strategy.options_sto.date"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "scheduled_at") scheduled_at("scheduled_at"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "send_time") send_time("send_time");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsTemplate
     */
     enum class FieldsTemplateGetCampaignCampaignMessages(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "editor_type") editor_type("editor_type"),
         @Json(name = "html") html("html"),
         @Json(name = "text") text("text"),
         @Json(name = "created") created("created"),
         @Json(name = "updated") updated("updated");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter include
     */
     enum class IncludeGetCampaignCampaignMessages(val value: kotlin.String) {
         @Json(name = "campaign") campaign("campaign"),
         @Json(name = "template") template("template");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Campaign Messages
     * Return all messages that belong to the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return GetCampaignMessageResponseCollectionCompoundDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignCampaignMessages(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaignCampaignMessages>? = null, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignCampaignMessages>? = null, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignCampaignMessages>? = null, include: kotlin.collections.List<IncludeGetCampaignCampaignMessages>? = null) : GetCampaignMessageResponseCollectionCompoundDocument {
        val localVarResponse = getCampaignCampaignMessagesWithHttpInfo(id = id, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTemplate = fieldsTemplate, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignMessageResponseCollectionCompoundDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Campaign Messages
     * Return all messages that belong to the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return ApiResponse<GetCampaignMessageResponseCollectionCompoundDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignCampaignMessagesWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaignCampaignMessages>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignCampaignMessages>?, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignCampaignMessages>?, include: kotlin.collections.List<IncludeGetCampaignCampaignMessages>?) : ApiResponse<GetCampaignMessageResponseCollectionCompoundDocument?> {
        val localVariableConfig = getCampaignCampaignMessagesRequestConfig(id = id, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTemplate = fieldsTemplate, include = include)

        return request<Unit, GetCampaignMessageResponseCollectionCompoundDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignCampaignMessages
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return RequestConfig
     */
    fun getCampaignCampaignMessagesRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaignCampaignMessages>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignCampaignMessages>?, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignCampaignMessages>?, include: kotlin.collections.List<IncludeGetCampaignCampaignMessages>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaignMessage != null) {
                    put("fields[campaign-message]", toMultiValue(fieldsCampaignMessage.toList(), "csv"))
                }
                if (fieldsCampaign != null) {
                    put("fields[campaign]", toMultiValue(fieldsCampaign.toList(), "csv"))
                }
                if (fieldsTemplate != null) {
                    put("fields[template]", toMultiValue(fieldsTemplate.toList(), "csv"))
                }
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaigns/{id}/campaign-messages/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignMessage
     */
     enum class FieldsCampaignMessageGetCampaignMessage(val value: kotlin.String) {
         @Json(name = "label") label("label"),
         @Json(name = "channel") channel("channel"),
         @Json(name = "content") content("content"),
         @Json(name = "send_times") send_times("send_times"),
         @Json(name = "render_options") render_options("render_options"),
         @Json(name = "render_options.shorten_links") render_optionsPeriodShorten_links("render_options.shorten_links"),
         @Json(name = "render_options.add_org_prefix") render_optionsPeriodAdd_org_prefix("render_options.add_org_prefix"),
         @Json(name = "render_options.add_info_link") render_optionsPeriodAdd_info_link("render_options.add_info_link"),
         @Json(name = "render_options.add_opt_out_language") render_optionsPeriodAdd_opt_out_language("render_options.add_opt_out_language"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "updated_at") updated_at("updated_at");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsCampaign
     */
     enum class FieldsCampaignGetCampaignMessage(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "status") status("status"),
         @Json(name = "archived") archived("archived"),
         @Json(name = "audiences") audiences("audiences"),
         @Json(name = "audiences.included") audiencesPeriodIncluded("audiences.included"),
         @Json(name = "audiences.excluded") audiencesPeriodExcluded("audiences.excluded"),
         @Json(name = "send_options") send_options("send_options"),
         @Json(name = "tracking_options") tracking_options("tracking_options"),
         @Json(name = "send_strategy") send_strategy("send_strategy"),
         @Json(name = "send_strategy.method") send_strategyPeriodMethod("send_strategy.method"),
         @Json(name = "send_strategy.options_static") send_strategyPeriodOptions_static("send_strategy.options_static"),
         @Json(name = "send_strategy.options_static.datetime") send_strategyPeriodOptions_staticPeriodDatetime("send_strategy.options_static.datetime"),
         @Json(name = "send_strategy.options_static.is_local") send_strategyPeriodOptions_staticPeriodIs_local("send_strategy.options_static.is_local"),
         @Json(name = "send_strategy.options_static.send_past_recipients_immediately") send_strategyPeriodOptions_staticPeriodSend_past_recipients_immediately("send_strategy.options_static.send_past_recipients_immediately"),
         @Json(name = "send_strategy.options_throttled") send_strategyPeriodOptions_throttled("send_strategy.options_throttled"),
         @Json(name = "send_strategy.options_throttled.datetime") send_strategyPeriodOptions_throttledPeriodDatetime("send_strategy.options_throttled.datetime"),
         @Json(name = "send_strategy.options_throttled.throttle_percentage") send_strategyPeriodOptions_throttledPeriodThrottle_percentage("send_strategy.options_throttled.throttle_percentage"),
         @Json(name = "send_strategy.options_sto") send_strategyPeriodOptions_sto("send_strategy.options_sto"),
         @Json(name = "send_strategy.options_sto.date") send_strategyPeriodOptions_stoPeriodDate("send_strategy.options_sto.date"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "scheduled_at") scheduled_at("scheduled_at"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "send_time") send_time("send_time");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsTemplate
     */
     enum class FieldsTemplateGetCampaignMessage(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "editor_type") editor_type("editor_type"),
         @Json(name = "html") html("html"),
         @Json(name = "text") text("text"),
         @Json(name = "created") created("created"),
         @Json(name = "updated") updated("updated");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter include
     */
     enum class IncludeGetCampaignMessage(val value: kotlin.String) {
         @Json(name = "campaign") campaign("campaign"),
         @Json(name = "template") template("template");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Message
     * Returns a specific message based on a required id.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The message ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return GetCampaignMessageResponseCompoundDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignMessage(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaignMessage>? = null, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignMessage>? = null, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignMessage>? = null, include: kotlin.collections.List<IncludeGetCampaignMessage>? = null) : GetCampaignMessageResponseCompoundDocument {
        val localVarResponse = getCampaignMessageWithHttpInfo(id = id, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTemplate = fieldsTemplate, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignMessageResponseCompoundDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Message
     * Returns a specific message based on a required id.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The message ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return ApiResponse<GetCampaignMessageResponseCompoundDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignMessageWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaignMessage>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignMessage>?, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignMessage>?, include: kotlin.collections.List<IncludeGetCampaignMessage>?) : ApiResponse<GetCampaignMessageResponseCompoundDocument?> {
        val localVariableConfig = getCampaignMessageRequestConfig(id = id, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTemplate = fieldsTemplate, include = include)

        return request<Unit, GetCampaignMessageResponseCompoundDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignMessage
     *
     * @param id The message ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @return RequestConfig
     */
    fun getCampaignMessageRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaignMessage>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignMessage>?, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignMessage>?, include: kotlin.collections.List<IncludeGetCampaignMessage>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaignMessage != null) {
                    put("fields[campaign-message]", toMultiValue(fieldsCampaignMessage.toList(), "csv"))
                }
                if (fieldsCampaign != null) {
                    put("fields[campaign]", toMultiValue(fieldsCampaign.toList(), "csv"))
                }
                if (fieldsTemplate != null) {
                    put("fields[template]", toMultiValue(fieldsTemplate.toList(), "csv"))
                }
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-messages/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaign
     */
     enum class FieldsCampaignGetCampaignMessageCampaign(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "status") status("status"),
         @Json(name = "archived") archived("archived"),
         @Json(name = "audiences") audiences("audiences"),
         @Json(name = "audiences.included") audiencesPeriodIncluded("audiences.included"),
         @Json(name = "audiences.excluded") audiencesPeriodExcluded("audiences.excluded"),
         @Json(name = "send_options") send_options("send_options"),
         @Json(name = "tracking_options") tracking_options("tracking_options"),
         @Json(name = "send_strategy") send_strategy("send_strategy"),
         @Json(name = "send_strategy.method") send_strategyPeriodMethod("send_strategy.method"),
         @Json(name = "send_strategy.options_static") send_strategyPeriodOptions_static("send_strategy.options_static"),
         @Json(name = "send_strategy.options_static.datetime") send_strategyPeriodOptions_staticPeriodDatetime("send_strategy.options_static.datetime"),
         @Json(name = "send_strategy.options_static.is_local") send_strategyPeriodOptions_staticPeriodIs_local("send_strategy.options_static.is_local"),
         @Json(name = "send_strategy.options_static.send_past_recipients_immediately") send_strategyPeriodOptions_staticPeriodSend_past_recipients_immediately("send_strategy.options_static.send_past_recipients_immediately"),
         @Json(name = "send_strategy.options_throttled") send_strategyPeriodOptions_throttled("send_strategy.options_throttled"),
         @Json(name = "send_strategy.options_throttled.datetime") send_strategyPeriodOptions_throttledPeriodDatetime("send_strategy.options_throttled.datetime"),
         @Json(name = "send_strategy.options_throttled.throttle_percentage") send_strategyPeriodOptions_throttledPeriodThrottle_percentage("send_strategy.options_throttled.throttle_percentage"),
         @Json(name = "send_strategy.options_sto") send_strategyPeriodOptions_sto("send_strategy.options_sto"),
         @Json(name = "send_strategy.options_sto.date") send_strategyPeriodOptions_stoPeriodDate("send_strategy.options_sto.date"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "scheduled_at") scheduled_at("scheduled_at"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "send_time") send_time("send_time");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Message Campaign
     * Return the related campaign&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetCampaignResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignMessageCampaign(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignMessageCampaign>? = null) : GetCampaignResponse {
        val localVarResponse = getCampaignMessageCampaignWithHttpInfo(id = id, revision = revision, fieldsCampaign = fieldsCampaign)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Message Campaign
     * Return the related campaign&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetCampaignResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignMessageCampaignWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignMessageCampaign>?) : ApiResponse<GetCampaignResponse?> {
        val localVariableConfig = getCampaignMessageCampaignRequestConfig(id = id, revision = revision, fieldsCampaign = fieldsCampaign)

        return request<Unit, GetCampaignResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignMessageCampaign
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getCampaignMessageCampaignRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaignMessageCampaign>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaign != null) {
                    put("fields[campaign]", toMultiValue(fieldsCampaign.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-messages/{id}/campaign/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Campaign Message Relationships Campaign
     * Returns the ID of the related campaign&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetCampaignMessageCampaignRelationshipListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignMessageRelationshipsCampaign(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetCampaignMessageCampaignRelationshipListResponse {
        val localVarResponse = getCampaignMessageRelationshipsCampaignWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignMessageCampaignRelationshipListResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Message Relationships Campaign
     * Returns the ID of the related campaign&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetCampaignMessageCampaignRelationshipListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignMessageRelationshipsCampaignWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetCampaignMessageCampaignRelationshipListResponse?> {
        val localVariableConfig = getCampaignMessageRelationshipsCampaignRequestConfig(id = id, revision = revision)

        return request<Unit, GetCampaignMessageCampaignRelationshipListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignMessageRelationshipsCampaign
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getCampaignMessageRelationshipsCampaignRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-messages/{id}/relationships/campaign/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Campaign Message Relationships Template
     * Returns the ID of the related template&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;templates:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetCampaignMessageTemplateRelationshipListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignMessageRelationshipsTemplate(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetCampaignMessageTemplateRelationshipListResponse {
        val localVarResponse = getCampaignMessageRelationshipsTemplateWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignMessageTemplateRelationshipListResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Message Relationships Template
     * Returns the ID of the related template&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;templates:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetCampaignMessageTemplateRelationshipListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignMessageRelationshipsTemplateWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetCampaignMessageTemplateRelationshipListResponse?> {
        val localVariableConfig = getCampaignMessageRelationshipsTemplateRequestConfig(id = id, revision = revision)

        return request<Unit, GetCampaignMessageTemplateRelationshipListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignMessageRelationshipsTemplate
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getCampaignMessageRelationshipsTemplateRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-messages/{id}/relationships/template/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTemplate
     */
     enum class FieldsTemplateGetCampaignMessageTemplate(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "editor_type") editor_type("editor_type"),
         @Json(name = "html") html("html"),
         @Json(name = "text") text("text"),
         @Json(name = "created") created("created"),
         @Json(name = "updated") updated("updated");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Message Template
     * Return the related template&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;templates:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetTemplateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignMessageTemplate(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignMessageTemplate>? = null) : GetTemplateResponse {
        val localVarResponse = getCampaignMessageTemplateWithHttpInfo(id = id, revision = revision, fieldsTemplate = fieldsTemplate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTemplateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Message Template
     * Return the related template&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;templates:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetTemplateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignMessageTemplateWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignMessageTemplate>?) : ApiResponse<GetTemplateResponse?> {
        val localVariableConfig = getCampaignMessageTemplateRequestConfig(id = id, revision = revision, fieldsTemplate = fieldsTemplate)

        return request<Unit, GetTemplateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignMessageTemplate
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getCampaignMessageTemplateRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsTemplate: kotlin.collections.List<FieldsTemplateGetCampaignMessageTemplate>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTemplate != null) {
                    put("fields[template]", toMultiValue(fieldsTemplate.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-messages/{id}/template/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignRecipientEstimation
     */
     enum class FieldsCampaignRecipientEstimationGetCampaignRecipientEstimation(val value: kotlin.String) {
         @Json(name = "estimated_recipient_count") estimated_recipient_count("estimated_recipient_count");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Recipient Estimation
     * Get the estimated recipient count for a campaign with the provided campaign ID. You can refresh this count by using the &#x60;Create Campaign Recipient Estimation Job&#x60; endpoint.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The ID of the campaign for which to get the estimated number of recipients
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignRecipientEstimation For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetCampaignRecipientEstimationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignRecipientEstimation(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignRecipientEstimation: kotlin.collections.List<FieldsCampaignRecipientEstimationGetCampaignRecipientEstimation>? = null) : GetCampaignRecipientEstimationResponse {
        val localVarResponse = getCampaignRecipientEstimationWithHttpInfo(id = id, revision = revision, fieldsCampaignRecipientEstimation = fieldsCampaignRecipientEstimation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignRecipientEstimationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Recipient Estimation
     * Get the estimated recipient count for a campaign with the provided campaign ID. You can refresh this count by using the &#x60;Create Campaign Recipient Estimation Job&#x60; endpoint.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The ID of the campaign for which to get the estimated number of recipients
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignRecipientEstimation For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetCampaignRecipientEstimationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignRecipientEstimationWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaignRecipientEstimation: kotlin.collections.List<FieldsCampaignRecipientEstimationGetCampaignRecipientEstimation>?) : ApiResponse<GetCampaignRecipientEstimationResponse?> {
        val localVariableConfig = getCampaignRecipientEstimationRequestConfig(id = id, revision = revision, fieldsCampaignRecipientEstimation = fieldsCampaignRecipientEstimation)

        return request<Unit, GetCampaignRecipientEstimationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignRecipientEstimation
     *
     * @param id The ID of the campaign for which to get the estimated number of recipients
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignRecipientEstimation For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getCampaignRecipientEstimationRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaignRecipientEstimation: kotlin.collections.List<FieldsCampaignRecipientEstimationGetCampaignRecipientEstimation>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaignRecipientEstimation != null) {
                    put("fields[campaign-recipient-estimation]", toMultiValue(fieldsCampaignRecipientEstimation.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-recipient-estimations/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignRecipientEstimationJob
     */
     enum class FieldsCampaignRecipientEstimationJobGetCampaignRecipientEstimationJob(val value: kotlin.String) {
         @Json(name = "status") status("status");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Recipient Estimation Job
     * Retrieve the status of a recipient estimation job triggered with the &#x60;Create Campaign Recipient Estimation Job&#x60; endpoint.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The ID of the campaign to get recipient estimation status
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignRecipientEstimationJob For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetCampaignRecipientEstimationJobResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignRecipientEstimationJob(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignRecipientEstimationJob: kotlin.collections.List<FieldsCampaignRecipientEstimationJobGetCampaignRecipientEstimationJob>? = null) : GetCampaignRecipientEstimationJobResponse {
        val localVarResponse = getCampaignRecipientEstimationJobWithHttpInfo(id = id, revision = revision, fieldsCampaignRecipientEstimationJob = fieldsCampaignRecipientEstimationJob)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignRecipientEstimationJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Recipient Estimation Job
     * Retrieve the status of a recipient estimation job triggered with the &#x60;Create Campaign Recipient Estimation Job&#x60; endpoint.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The ID of the campaign to get recipient estimation status
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignRecipientEstimationJob For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetCampaignRecipientEstimationJobResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignRecipientEstimationJobWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaignRecipientEstimationJob: kotlin.collections.List<FieldsCampaignRecipientEstimationJobGetCampaignRecipientEstimationJob>?) : ApiResponse<GetCampaignRecipientEstimationJobResponse?> {
        val localVariableConfig = getCampaignRecipientEstimationJobRequestConfig(id = id, revision = revision, fieldsCampaignRecipientEstimationJob = fieldsCampaignRecipientEstimationJob)

        return request<Unit, GetCampaignRecipientEstimationJobResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignRecipientEstimationJob
     *
     * @param id The ID of the campaign to get recipient estimation status
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignRecipientEstimationJob For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getCampaignRecipientEstimationJobRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaignRecipientEstimationJob: kotlin.collections.List<FieldsCampaignRecipientEstimationJobGetCampaignRecipientEstimationJob>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaignRecipientEstimationJob != null) {
                    put("fields[campaign-recipient-estimation-job]", toMultiValue(fieldsCampaignRecipientEstimationJob.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-recipient-estimation-jobs/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Campaign Relationships Campaign Messages
     * Returns the IDs of all messages associated with the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetCampaignMessagesRelationshipListResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignRelationshipsCampaignMessages(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetCampaignMessagesRelationshipListResponseCollection {
        val localVarResponse = getCampaignRelationshipsCampaignMessagesWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignMessagesRelationshipListResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Relationships Campaign Messages
     * Returns the IDs of all messages associated with the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetCampaignMessagesRelationshipListResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignRelationshipsCampaignMessagesWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetCampaignMessagesRelationshipListResponseCollection?> {
        val localVariableConfig = getCampaignRelationshipsCampaignMessagesRequestConfig(id = id, revision = revision)

        return request<Unit, GetCampaignMessagesRelationshipListResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignRelationshipsCampaignMessages
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getCampaignRelationshipsCampaignMessagesRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaigns/{id}/relationships/campaign-messages/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Campaign Relationships Tags
     * Returns the IDs of all tags associated with the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return GetCampaignTagRelationshipListResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignRelationshipsTags(id: kotlin.String, revision: kotlin.String = "2024-07-15") : GetCampaignTagRelationshipListResponseCollection {
        val localVarResponse = getCampaignRelationshipsTagsWithHttpInfo(id = id, revision = revision)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignTagRelationshipListResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Relationships Tags
     * Returns the IDs of all tags associated with the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return ApiResponse<GetCampaignTagRelationshipListResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignRelationshipsTagsWithHttpInfo(id: kotlin.String, revision: kotlin.String) : ApiResponse<GetCampaignTagRelationshipListResponseCollection?> {
        val localVariableConfig = getCampaignRelationshipsTagsRequestConfig(id = id, revision = revision)

        return request<Unit, GetCampaignTagRelationshipListResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignRelationshipsTags
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @return RequestConfig
     */
    fun getCampaignRelationshipsTagsRequestConfig(id: kotlin.String, revision: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaigns/{id}/relationships/tags/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignSendJob
     */
     enum class FieldsCampaignSendJobGetCampaignSendJob(val value: kotlin.String) {
         @Json(name = "status") status("status");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Send Job
     * Get a campaign send job&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The ID of the campaign to send
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignSendJob For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetCampaignSendJobResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignSendJob(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignSendJob: kotlin.collections.List<FieldsCampaignSendJobGetCampaignSendJob>? = null) : GetCampaignSendJobResponse {
        val localVarResponse = getCampaignSendJobWithHttpInfo(id = id, revision = revision, fieldsCampaignSendJob = fieldsCampaignSendJob)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignSendJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Send Job
     * Get a campaign send job&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param id The ID of the campaign to send
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignSendJob For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetCampaignSendJobResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignSendJobWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsCampaignSendJob: kotlin.collections.List<FieldsCampaignSendJobGetCampaignSendJob>?) : ApiResponse<GetCampaignSendJobResponse?> {
        val localVariableConfig = getCampaignSendJobRequestConfig(id = id, revision = revision, fieldsCampaignSendJob = fieldsCampaignSendJob)

        return request<Unit, GetCampaignSendJobResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignSendJob
     *
     * @param id The ID of the campaign to send
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignSendJob For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getCampaignSendJobRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsCampaignSendJob: kotlin.collections.List<FieldsCampaignSendJobGetCampaignSendJob>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsCampaignSendJob != null) {
                    put("fields[campaign-send-job]", toMultiValue(fieldsCampaignSendJob.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaign-send-jobs/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsTag
     */
     enum class FieldsTagGetCampaignTags(val value: kotlin.String) {
         @Json(name = "name") name("name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaign Tags
     * Return all tags that belong to the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return GetTagResponseCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaignTags(id: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsTag: kotlin.collections.List<FieldsTagGetCampaignTags>? = null) : GetTagResponseCollection {
        val localVarResponse = getCampaignTagsWithHttpInfo(id = id, revision = revision, fieldsTag = fieldsTag)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTagResponseCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaign Tags
     * Return all tags that belong to the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return ApiResponse<GetTagResponseCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignTagsWithHttpInfo(id: kotlin.String, revision: kotlin.String, fieldsTag: kotlin.collections.List<FieldsTagGetCampaignTags>?) : ApiResponse<GetTagResponseCollection?> {
        val localVariableConfig = getCampaignTagsRequestConfig(id = id, revision = revision, fieldsTag = fieldsTag)

        return request<Unit, GetTagResponseCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaignTags
     *
     * @param id 
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @return RequestConfig
     */
    fun getCampaignTagsRequestConfig(id: kotlin.String, revision: kotlin.String, fieldsTag: kotlin.collections.List<FieldsTagGetCampaignTags>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTag != null) {
                    put("fields[tag]", toMultiValue(fieldsTag.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaigns/{id}/tags/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter fieldsCampaignMessage
     */
     enum class FieldsCampaignMessageGetCampaigns(val value: kotlin.String) {
         @Json(name = "label") label("label"),
         @Json(name = "channel") channel("channel"),
         @Json(name = "content") content("content"),
         @Json(name = "send_times") send_times("send_times"),
         @Json(name = "render_options") render_options("render_options"),
         @Json(name = "render_options.shorten_links") render_optionsPeriodShorten_links("render_options.shorten_links"),
         @Json(name = "render_options.add_org_prefix") render_optionsPeriodAdd_org_prefix("render_options.add_org_prefix"),
         @Json(name = "render_options.add_info_link") render_optionsPeriodAdd_info_link("render_options.add_info_link"),
         @Json(name = "render_options.add_opt_out_language") render_optionsPeriodAdd_opt_out_language("render_options.add_opt_out_language"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "updated_at") updated_at("updated_at");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsCampaign
     */
     enum class FieldsCampaignGetCampaigns(val value: kotlin.String) {
         @Json(name = "name") name("name"),
         @Json(name = "status") status("status"),
         @Json(name = "archived") archived("archived"),
         @Json(name = "audiences") audiences("audiences"),
         @Json(name = "audiences.included") audiencesPeriodIncluded("audiences.included"),
         @Json(name = "audiences.excluded") audiencesPeriodExcluded("audiences.excluded"),
         @Json(name = "send_options") send_options("send_options"),
         @Json(name = "tracking_options") tracking_options("tracking_options"),
         @Json(name = "send_strategy") send_strategy("send_strategy"),
         @Json(name = "send_strategy.method") send_strategyPeriodMethod("send_strategy.method"),
         @Json(name = "send_strategy.options_static") send_strategyPeriodOptions_static("send_strategy.options_static"),
         @Json(name = "send_strategy.options_static.datetime") send_strategyPeriodOptions_staticPeriodDatetime("send_strategy.options_static.datetime"),
         @Json(name = "send_strategy.options_static.is_local") send_strategyPeriodOptions_staticPeriodIs_local("send_strategy.options_static.is_local"),
         @Json(name = "send_strategy.options_static.send_past_recipients_immediately") send_strategyPeriodOptions_staticPeriodSend_past_recipients_immediately("send_strategy.options_static.send_past_recipients_immediately"),
         @Json(name = "send_strategy.options_throttled") send_strategyPeriodOptions_throttled("send_strategy.options_throttled"),
         @Json(name = "send_strategy.options_throttled.datetime") send_strategyPeriodOptions_throttledPeriodDatetime("send_strategy.options_throttled.datetime"),
         @Json(name = "send_strategy.options_throttled.throttle_percentage") send_strategyPeriodOptions_throttledPeriodThrottle_percentage("send_strategy.options_throttled.throttle_percentage"),
         @Json(name = "send_strategy.options_sto") send_strategyPeriodOptions_sto("send_strategy.options_sto"),
         @Json(name = "send_strategy.options_sto.date") send_strategyPeriodOptions_stoPeriodDate("send_strategy.options_sto.date"),
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "scheduled_at") scheduled_at("scheduled_at"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "send_time") send_time("send_time");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter fieldsTag
     */
     enum class FieldsTagGetCampaigns(val value: kotlin.String) {
         @Json(name = "name") name("name");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter include
     */
     enum class IncludeGetCampaigns(val value: kotlin.String) {
         @Json(name = "campaign-messages") campaignMinusMessages("campaign-messages"),
         @Json(name = "tags") tags("tags");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter sort
     */
     enum class SortGetCampaigns(val value: kotlin.String) {
         @Json(name = "created_at") created_at("created_at"),
         @Json(name = "-created_at") MinusCreated_at("-created_at"),
         @Json(name = "id") id("id"),
         @Json(name = "-id") MinusId("-id"),
         @Json(name = "name") name("name"),
         @Json(name = "-name") MinusName("-name"),
         @Json(name = "scheduled_at") scheduled_at("scheduled_at"),
         @Json(name = "-scheduled_at") MinusScheduled_at("-scheduled_at"),
         @Json(name = "updated_at") updated_at("updated_at"),
         @Json(name = "-updated_at") MinusUpdated_at("-updated_at");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get Campaigns
     * Returns some or all campaigns based on filters.  A channel filter is required to list campaigns. Please provide either: &#x60;?filter&#x3D;equals(messages.channel,&#39;email&#39;)&#x60; to list email campaigns, or &#x60;?filter&#x3D;equals(messages.channel,&#39;sms&#39;)&#x60; to list SMS campaigns.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return GetCampaignResponseCollectionCompoundDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaigns(filter: kotlin.String, revision: kotlin.String = "2024-07-15", fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaigns>? = null, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaigns>? = null, fieldsTag: kotlin.collections.List<FieldsTagGetCampaigns>? = null, include: kotlin.collections.List<IncludeGetCampaigns>? = null, pageCursor: kotlin.String? = null, sort: SortGetCampaigns? = null) : GetCampaignResponseCollectionCompoundDocument {
        val localVarResponse = getCampaignsWithHttpInfo(filter = filter, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTag = fieldsTag, include = include, pageCursor = pageCursor, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCampaignResponseCollectionCompoundDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Campaigns
     * Returns some or all campaigns based on filters.  A channel filter is required to list campaigns. Please provide either: &#x60;?filter&#x3D;equals(messages.channel,&#39;email&#39;)&#x60; to list email campaigns, or &#x60;?filter&#x3D;equals(messages.channel,&#39;sms&#39;)&#x60; to list SMS campaigns.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return ApiResponse<GetCampaignResponseCollectionCompoundDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignsWithHttpInfo(filter: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaigns>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaigns>?, fieldsTag: kotlin.collections.List<FieldsTagGetCampaigns>?, include: kotlin.collections.List<IncludeGetCampaigns>?, pageCursor: kotlin.String?, sort: SortGetCampaigns?) : ApiResponse<GetCampaignResponseCollectionCompoundDocument?> {
        val localVariableConfig = getCampaignsRequestConfig(filter = filter, revision = revision, fieldsCampaignMessage = fieldsCampaignMessage, fieldsCampaign = fieldsCampaign, fieldsTag = fieldsTag, include = include, pageCursor = pageCursor, sort = sort)

        return request<Unit, GetCampaignResponseCollectionCompoundDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaigns
     *
     * @param filter For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param fieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param include For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#relationships (optional)
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#pagination (optional)
     * @param sort For more information please visit https://developers.klaviyo.com/en/v2024-07-15/reference/api-overview#sorting (optional)
     * @return RequestConfig
     */
    fun getCampaignsRequestConfig(filter: kotlin.String, revision: kotlin.String, fieldsCampaignMessage: kotlin.collections.List<FieldsCampaignMessageGetCampaigns>?, fieldsCampaign: kotlin.collections.List<FieldsCampaignGetCampaigns>?, fieldsTag: kotlin.collections.List<FieldsTagGetCampaigns>?, include: kotlin.collections.List<IncludeGetCampaigns>?, pageCursor: kotlin.String?, sort: SortGetCampaigns?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("filter", listOf(filter.toString()))
                if (fieldsCampaignMessage != null) {
                    put("fields[campaign-message]", toMultiValue(fieldsCampaignMessage.toList(), "csv"))
                }
                if (fieldsCampaign != null) {
                    put("fields[campaign]", toMultiValue(fieldsCampaign.toList(), "csv"))
                }
                if (fieldsTag != null) {
                    put("fields[tag]", toMultiValue(fieldsTag.toList(), "csv"))
                }
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "csv"))
                }
                if (pageCursor != null) {
                    put("page[cursor]", listOf(pageCursor.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/campaigns/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Campaign
     * Update a campaign with the given campaign ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The campaign ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignPartialUpdateQuery Update a campaign and return it
     * @return PatchCampaignResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCampaign(id: kotlin.String, revision: kotlin.String = "2024-07-15", campaignPartialUpdateQuery: CampaignPartialUpdateQuery) : PatchCampaignResponse {
        val localVarResponse = updateCampaignWithHttpInfo(id = id, revision = revision, campaignPartialUpdateQuery = campaignPartialUpdateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PatchCampaignResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Campaign
     * Update a campaign with the given campaign ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The campaign ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignPartialUpdateQuery Update a campaign and return it
     * @return ApiResponse<PatchCampaignResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCampaignWithHttpInfo(id: kotlin.String, revision: kotlin.String, campaignPartialUpdateQuery: CampaignPartialUpdateQuery) : ApiResponse<PatchCampaignResponse?> {
        val localVariableConfig = updateCampaignRequestConfig(id = id, revision = revision, campaignPartialUpdateQuery = campaignPartialUpdateQuery)

        return request<CampaignPartialUpdateQuery, PatchCampaignResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCampaign
     *
     * @param id The campaign ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignPartialUpdateQuery Update a campaign and return it
     * @return RequestConfig
     */
    fun updateCampaignRequestConfig(id: kotlin.String, revision: kotlin.String, campaignPartialUpdateQuery: CampaignPartialUpdateQuery) : RequestConfig<CampaignPartialUpdateQuery> {
        val localVariableBody = campaignPartialUpdateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/campaigns/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Campaign Message
     * Update a campaign message&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The message ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignMessagePartialUpdateQuery Update a message and return it
     * @return PatchCampaignMessageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCampaignMessage(id: kotlin.String, revision: kotlin.String = "2024-07-15", campaignMessagePartialUpdateQuery: CampaignMessagePartialUpdateQuery) : PatchCampaignMessageResponse {
        val localVarResponse = updateCampaignMessageWithHttpInfo(id = id, revision = revision, campaignMessagePartialUpdateQuery = campaignMessagePartialUpdateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PatchCampaignMessageResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Campaign Message
     * Update a campaign message&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The message ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignMessagePartialUpdateQuery Update a message and return it
     * @return ApiResponse<PatchCampaignMessageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCampaignMessageWithHttpInfo(id: kotlin.String, revision: kotlin.String, campaignMessagePartialUpdateQuery: CampaignMessagePartialUpdateQuery) : ApiResponse<PatchCampaignMessageResponse?> {
        val localVariableConfig = updateCampaignMessageRequestConfig(id = id, revision = revision, campaignMessagePartialUpdateQuery = campaignMessagePartialUpdateQuery)

        return request<CampaignMessagePartialUpdateQuery, PatchCampaignMessageResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCampaignMessage
     *
     * @param id The message ID to be retrieved
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignMessagePartialUpdateQuery Update a message and return it
     * @return RequestConfig
     */
    fun updateCampaignMessageRequestConfig(id: kotlin.String, revision: kotlin.String, campaignMessagePartialUpdateQuery: CampaignMessagePartialUpdateQuery) : RequestConfig<CampaignMessagePartialUpdateQuery> {
        val localVariableBody = campaignMessagePartialUpdateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/campaign-messages/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Campaign Send Job
     * Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The ID of the currently sending campaign to cancel or revert
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignSendJobPartialUpdateQuery Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCampaignSendJob(id: kotlin.String, revision: kotlin.String = "2024-07-15", campaignSendJobPartialUpdateQuery: CampaignSendJobPartialUpdateQuery) : Unit {
        val localVarResponse = updateCampaignSendJobWithHttpInfo(id = id, revision = revision, campaignSendJobPartialUpdateQuery = campaignSendJobPartialUpdateQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Campaign Send Job
     * Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     * @param id The ID of the currently sending campaign to cancel or revert
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignSendJobPartialUpdateQuery Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCampaignSendJobWithHttpInfo(id: kotlin.String, revision: kotlin.String, campaignSendJobPartialUpdateQuery: CampaignSendJobPartialUpdateQuery) : ApiResponse<Unit?> {
        val localVariableConfig = updateCampaignSendJobRequestConfig(id = id, revision = revision, campaignSendJobPartialUpdateQuery = campaignSendJobPartialUpdateQuery)

        return request<CampaignSendJobPartialUpdateQuery, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCampaignSendJob
     *
     * @param id The ID of the currently sending campaign to cancel or revert
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix]) (default to "2024-07-15")
     * @param campaignSendJobPartialUpdateQuery Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT
     * @return RequestConfig
     */
    fun updateCampaignSendJobRequestConfig(id: kotlin.String, revision: kotlin.String, campaignSendJobPartialUpdateQuery: CampaignSendJobPartialUpdateQuery) : RequestConfig<CampaignSendJobPartialUpdateQuery> {
        val localVariableBody = campaignSendJobPartialUpdateQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        revision.apply { localVariableHeaders["revision"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/campaign-send-jobs/{id}/".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
