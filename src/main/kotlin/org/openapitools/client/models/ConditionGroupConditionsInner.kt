/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.NumericOperatorFilter
import org.openapitools.client.models.ProfileHasGroupMembershipCondition
import org.openapitools.client.models.ProfileMarketingConsentCondition
import org.openapitools.client.models.ProfileMarketingConsentConditionConsent
import org.openapitools.client.models.ProfileMetricCondition
import org.openapitools.client.models.ProfileMetricConditionTimeframeFilter
import org.openapitools.client.models.ProfileMetricPropertyFilter
import org.openapitools.client.models.ProfileNoGroupMembershipCondition
import org.openapitools.client.models.ProfilePostalCodeDistanceCondition
import org.openapitools.client.models.ProfilePredictiveAnalyticsEnum
import org.openapitools.client.models.ProfilePredictiveAnalyticsNumericCondition
import org.openapitools.client.models.ProfilePredictiveAnalyticsStringCondition
import org.openapitools.client.models.ProfilePredictiveAnalyticsStringFilter
import org.openapitools.client.models.ProfilePropertyCondition
import org.openapitools.client.models.ProfileRegionCondition

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param type 
 * @param isMember 
 * @param groupIds 
 * @param timeframeFilter 
 * @param metricId 
 * @param measurement Measurements for profile metrics.
 * @param measurementFilter 
 * @param consent 
 * @param countryCode 
 * @param postalCode 
 * @param unit Units for profile postal code distance conditions.
 * @param filter 
 * @param `property` 
 * @param inRegion 
 * @param region Regions for profile region conditions.
 * @param dimension Dimension for string profile predictive analytics conditions.
 * @param metricFilters 
 */


data class ConditionGroupConditionsInner (

    @Json(name = "type")
    val type: ProfilePredictiveAnalyticsEnum,

    @Json(name = "is_member")
    val isMember: ConditionGroupConditionsInner.IsMember,

    @Json(name = "group_ids")
    val groupIds: kotlin.collections.List<kotlin.String>,

    @Json(name = "timeframe_filter")
    val timeframeFilter: ProfileMetricConditionTimeframeFilter,

    @Json(name = "metric_id")
    val metricId: kotlin.String,

    /* Measurements for profile metrics. */
    @Json(name = "measurement")
    val measurement: ConditionGroupConditionsInner.Measurement,

    @Json(name = "measurement_filter")
    val measurementFilter: NumericOperatorFilter,

    @Json(name = "consent")
    val consent: ProfileMarketingConsentConditionConsent,

    @Json(name = "country_code")
    val countryCode: kotlin.String,

    @Json(name = "postal_code")
    val postalCode: kotlin.String,

    /* Units for profile postal code distance conditions. */
    @Json(name = "unit")
    val unit: ConditionGroupConditionsInner.Unit,

    @Json(name = "filter")
    val filter: ProfilePredictiveAnalyticsStringFilter,

    @Json(name = "property")
    val `property`: kotlin.String,

    @Json(name = "in_region")
    val inRegion: kotlin.Boolean,

    /* Regions for profile region conditions. */
    @Json(name = "region")
    val region: ConditionGroupConditionsInner.Region,

    /* Dimension for string profile predictive analytics conditions. */
    @Json(name = "dimension")
    val dimension: ConditionGroupConditionsInner.Dimension,

    @Json(name = "metric_filters")
    val metricFilters: kotlin.collections.List<ProfileMetricPropertyFilter>? = null

) {

    /**
     * 
     *
     * Values: `false`
     */
    @JsonClass(generateAdapter = false)
    enum class IsMember(val value: kotlin.Boolean) {
        @Json(name = "false") `false`("false");
    }
    /**
     * Measurements for profile metrics.
     *
     * Values: count,sum
     */
    @JsonClass(generateAdapter = false)
    enum class Measurement(val value: kotlin.String) {
        @Json(name = "count") count("count"),
        @Json(name = "sum") sum("sum");
    }
    /**
     * Units for profile postal code distance conditions.
     *
     * Values: kilometers,miles
     */
    @JsonClass(generateAdapter = false)
    enum class Unit(val value: kotlin.String) {
        @Json(name = "kilometers") kilometers("kilometers"),
        @Json(name = "miles") miles("miles");
    }
    /**
     * Regions for profile region conditions.
     *
     * Values: european_union,united_states
     */
    @JsonClass(generateAdapter = false)
    enum class Region(val value: kotlin.String) {
        @Json(name = "european_union") european_union("european_union"),
        @Json(name = "united_states") united_states("united_states");
    }
    /**
     * Dimension for string profile predictive analytics conditions.
     *
     * Values: predicted_gender
     */
    @JsonClass(generateAdapter = false)
    enum class Dimension(val value: kotlin.String) {
        @Json(name = "predicted_gender") predicted_gender("predicted_gender");
    }

}

