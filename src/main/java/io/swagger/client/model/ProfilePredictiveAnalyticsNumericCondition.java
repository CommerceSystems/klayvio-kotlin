/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NumericOperatorFilter;
import io.swagger.client.model.ProfilePredictiveAnalyticsEnum;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ProfilePredictiveAnalyticsNumericCondition
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T16:09:09.130713678Z[GMT]")

public class ProfilePredictiveAnalyticsNumericCondition implements OneOfConditionGroupConditionsItems {
  @SerializedName("type")
  private ProfilePredictiveAnalyticsEnum type = null;

  /**
   * Dimensions for numeric profile predictive analytics conditions.
   */
  @JsonAdapter(DimensionEnum.Adapter.class)
  public enum DimensionEnum {
    @SerializedName("average_days_between_orders")
    AVERAGE_DAYS_BETWEEN_ORDERS("average_days_between_orders"),
    @SerializedName("average_order_value")
    AVERAGE_ORDER_VALUE("average_order_value"),
    @SerializedName("churn_probability")
    CHURN_PROBABILITY("churn_probability"),
    @SerializedName("historic_clv")
    HISTORIC_CLV("historic_clv"),
    @SerializedName("historic_number_of_orders")
    HISTORIC_NUMBER_OF_ORDERS("historic_number_of_orders"),
    @SerializedName("predicted_clv")
    PREDICTED_CLV("predicted_clv"),
    @SerializedName("predicted_number_of_orders")
    PREDICTED_NUMBER_OF_ORDERS("predicted_number_of_orders"),
    @SerializedName("total_clv")
    TOTAL_CLV("total_clv");

    private String value;

    DimensionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DimensionEnum fromValue(String input) {
      for (DimensionEnum b : DimensionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DimensionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DimensionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("dimension")
  private DimensionEnum dimension = null;

  @SerializedName("filter")
  private NumericOperatorFilter filter = null;

  public ProfilePredictiveAnalyticsNumericCondition type(ProfilePredictiveAnalyticsEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public ProfilePredictiveAnalyticsEnum getType() {
    return type;
  }

  public void setType(ProfilePredictiveAnalyticsEnum type) {
    this.type = type;
  }

  public ProfilePredictiveAnalyticsNumericCondition dimension(DimensionEnum dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * Dimensions for numeric profile predictive analytics conditions.
   * @return dimension
  **/
  @Schema(required = true, description = "Dimensions for numeric profile predictive analytics conditions.")
  public DimensionEnum getDimension() {
    return dimension;
  }

  public void setDimension(DimensionEnum dimension) {
    this.dimension = dimension;
  }

  public ProfilePredictiveAnalyticsNumericCondition filter(NumericOperatorFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Schema(required = true, description = "")
  public NumericOperatorFilter getFilter() {
    return filter;
  }

  public void setFilter(NumericOperatorFilter filter) {
    this.filter = filter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfilePredictiveAnalyticsNumericCondition profilePredictiveAnalyticsNumericCondition = (ProfilePredictiveAnalyticsNumericCondition) o;
    return Objects.equals(this.type, profilePredictiveAnalyticsNumericCondition.type) &&
        Objects.equals(this.dimension, profilePredictiveAnalyticsNumericCondition.dimension) &&
        Objects.equals(this.filter, profilePredictiveAnalyticsNumericCondition.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, dimension, filter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfilePredictiveAnalyticsNumericCondition {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
