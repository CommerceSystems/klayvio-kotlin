/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * TemplateResponseObjectResourceAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T16:09:09.130713678Z[GMT]")

public class TemplateResponseObjectResourceAttributes {
  @SerializedName("name")
  private String name = null;

  @SerializedName("editor_type")
  private String editorType = null;

  @SerializedName("html")
  private String html = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

  public TemplateResponseObjectResourceAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the template
   * @return name
  **/
  @Schema(required = true, description = "The name of the template")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TemplateResponseObjectResourceAttributes editorType(String editorType) {
    this.editorType = editorType;
    return this;
  }

   /**
   * &#x60;editor_type&#x60; has a fixed set of values: * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template * SIMPLE: A rich text editor template * CODE: A custom HTML template * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
   * @return editorType
  **/
  @Schema(required = true, description = "`editor_type` has a fixed set of values: * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template * SIMPLE: A rich text editor template * CODE: A custom HTML template * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor")
  public String getEditorType() {
    return editorType;
  }

  public void setEditorType(String editorType) {
    this.editorType = editorType;
  }

  public TemplateResponseObjectResourceAttributes html(String html) {
    this.html = html;
    return this;
  }

   /**
   * The rendered HTML of the template
   * @return html
  **/
  @Schema(required = true, description = "The rendered HTML of the template")
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }

  public TemplateResponseObjectResourceAttributes text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The template plain_text
   * @return text
  **/
  @Schema(description = "The template plain_text")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public TemplateResponseObjectResourceAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
   * @return created
  **/
  @Schema(example = "2022-11-08T00:00Z", description = "The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public TemplateResponseObjectResourceAttributes updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

   /**
   * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
   * @return updated
  **/
  @Schema(example = "2022-11-08T00:00Z", description = "The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateResponseObjectResourceAttributes templateResponseObjectResourceAttributes = (TemplateResponseObjectResourceAttributes) o;
    return Objects.equals(this.name, templateResponseObjectResourceAttributes.name) &&
        Objects.equals(this.editorType, templateResponseObjectResourceAttributes.editorType) &&
        Objects.equals(this.html, templateResponseObjectResourceAttributes.html) &&
        Objects.equals(this.text, templateResponseObjectResourceAttributes.text) &&
        Objects.equals(this.created, templateResponseObjectResourceAttributes.created) &&
        Objects.equals(this.updated, templateResponseObjectResourceAttributes.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, editorType, html, text, created, updated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateResponseObjectResourceAttributes {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    editorType: ").append(toIndentedString(editorType)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
