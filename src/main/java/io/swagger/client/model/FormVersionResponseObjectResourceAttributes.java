/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FormVersionABTest;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * FormVersionResponseObjectResourceAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T16:09:09.130713678Z[GMT]")

public class FormVersionResponseObjectResourceAttributes {
  /**
   * The type of form.
   */
  @JsonAdapter(FormTypeEnum.Adapter.class)
  public enum FormTypeEnum {
    @SerializedName("banner")
    BANNER("banner"),
    @SerializedName("embed")
    EMBED("embed"),
    @SerializedName("flyout")
    FLYOUT("flyout"),
    @SerializedName("full_page")
    FULL_PAGE("full_page"),
    @SerializedName("popup")
    POPUP("popup");

    private String value;

    FormTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormTypeEnum fromValue(String input) {
      for (FormTypeEnum b : FormTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FormTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FormTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("form_type")
  private FormTypeEnum formType = null;

  @SerializedName("ab_test")
  private FormVersionABTest abTest = null;

  /**
   * Status of the form version. \&quot;live\&quot; means it&#x27;s live on site.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("draft")
    DRAFT("draft"),
    @SerializedName("live")
    LIVE("live");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  public FormVersionResponseObjectResourceAttributes formType(FormTypeEnum formType) {
    this.formType = formType;
    return this;
  }

   /**
   * The type of form.
   * @return formType
  **/
  @Schema(required = true, description = "The type of form.")
  public FormTypeEnum getFormType() {
    return formType;
  }

  public void setFormType(FormTypeEnum formType) {
    this.formType = formType;
  }

  public FormVersionResponseObjectResourceAttributes abTest(FormVersionABTest abTest) {
    this.abTest = abTest;
    return this;
  }

   /**
   * Get abTest
   * @return abTest
  **/
  @Schema(description = "")
  public FormVersionABTest getAbTest() {
    return abTest;
  }

  public void setAbTest(FormVersionABTest abTest) {
    this.abTest = abTest;
  }

  public FormVersionResponseObjectResourceAttributes status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the form version. \&quot;live\&quot; means it&#x27;s live on site.
   * @return status
  **/
  @Schema(required = true, description = "Status of the form version. \"live\" means it's live on site.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public FormVersionResponseObjectResourceAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * ISO8601 timestamp when the form version was created.
   * @return createdAt
  **/
  @Schema(example = "2024-03-04T00:00Z", required = true, description = "ISO8601 timestamp when the form version was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public FormVersionResponseObjectResourceAttributes updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * ISO8601 timestamp when the form version was last updated.
   * @return updatedAt
  **/
  @Schema(example = "2024-03-04T00:00Z", required = true, description = "ISO8601 timestamp when the form version was last updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormVersionResponseObjectResourceAttributes formVersionResponseObjectResourceAttributes = (FormVersionResponseObjectResourceAttributes) o;
    return Objects.equals(this.formType, formVersionResponseObjectResourceAttributes.formType) &&
        Objects.equals(this.abTest, formVersionResponseObjectResourceAttributes.abTest) &&
        Objects.equals(this.status, formVersionResponseObjectResourceAttributes.status) &&
        Objects.equals(this.createdAt, formVersionResponseObjectResourceAttributes.createdAt) &&
        Objects.equals(this.updatedAt, formVersionResponseObjectResourceAttributes.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formType, abTest, status, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormVersionResponseObjectResourceAttributes {\n");
    
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    abTest: ").append(toIndentedString(abTest)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
