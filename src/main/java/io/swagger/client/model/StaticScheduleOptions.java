/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * StaticScheduleOptions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T16:09:09.130713678Z[GMT]")

public class StaticScheduleOptions {
  @SerializedName("datetime")
  private OffsetDateTime datetime = null;

  @SerializedName("is_local")
  private Boolean isLocal = null;

  @SerializedName("send_past_recipients_immediately")
  private Boolean sendPastRecipientsImmediately = null;

  public StaticScheduleOptions datetime(OffsetDateTime datetime) {
    this.datetime = datetime;
    return this;
  }

   /**
   * The time to send at
   * @return datetime
  **/
  @Schema(example = "2022-11-08T00:00Z", required = true, description = "The time to send at")
  public OffsetDateTime getDatetime() {
    return datetime;
  }

  public void setDatetime(OffsetDateTime datetime) {
    this.datetime = datetime;
  }

  public StaticScheduleOptions isLocal(Boolean isLocal) {
    this.isLocal = isLocal;
    return this;
  }

   /**
   * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
   * @return isLocal
  **/
  @Schema(description = "If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.")
  public Boolean isIsLocal() {
    return isLocal;
  }

  public void setIsLocal(Boolean isLocal) {
    this.isLocal = isLocal;
  }

  public StaticScheduleOptions sendPastRecipientsImmediately(Boolean sendPastRecipientsImmediately) {
    this.sendPastRecipientsImmediately = sendPastRecipientsImmediately;
    return this;
  }

   /**
   * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
   * @return sendPastRecipientsImmediately
  **/
  @Schema(description = "Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.")
  public Boolean isSendPastRecipientsImmediately() {
    return sendPastRecipientsImmediately;
  }

  public void setSendPastRecipientsImmediately(Boolean sendPastRecipientsImmediately) {
    this.sendPastRecipientsImmediately = sendPastRecipientsImmediately;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticScheduleOptions staticScheduleOptions = (StaticScheduleOptions) o;
    return Objects.equals(this.datetime, staticScheduleOptions.datetime) &&
        Objects.equals(this.isLocal, staticScheduleOptions.isLocal) &&
        Objects.equals(this.sendPastRecipientsImmediately, staticScheduleOptions.sendPastRecipientsImmediately);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datetime, isLocal, sendPastRecipientsImmediately);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticScheduleOptions {\n");
    
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("    sendPastRecipientsImmediately: ").append(toIndentedString(sendPastRecipientsImmediately)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
