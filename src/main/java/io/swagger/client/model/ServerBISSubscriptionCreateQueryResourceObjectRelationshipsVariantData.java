/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CatalogVariantEnum;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T16:09:09.130713678Z[GMT]")

public class ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData {
  @SerializedName("type")
  private CatalogVariantEnum type = null;

  @SerializedName("id")
  private String id = null;

  public ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData type(CatalogVariantEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public CatalogVariantEnum getType() {
    return type;
  }

  public void setType(CatalogVariantEnum type) {
    this.type = type;
  }

  public ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The catalog variant ID for which the profile is subscribing to back in stock notifications. This ID is made up of the integration type, catalog ID, and and the external ID of the variant like so: &#x60;integrationType:::catalogId:::externalId&#x60;. If the integration you are using is not set up for multi-catalog storage, the &#x27;catalogId&#x27; will be &#x60;$default&#x60;. For Shopify &#x60;$shopify:::$default:::33001893429341&#x60;
   * @return id
  **/
  @Schema(example = "$custom:::$default:::SAMPLE-DATA-ITEM-1-VARIANT-MEDIUM", required = true, description = "The catalog variant ID for which the profile is subscribing to back in stock notifications. This ID is made up of the integration type, catalog ID, and and the external ID of the variant like so: `integrationType:::catalogId:::externalId`. If the integration you are using is not set up for multi-catalog storage, the 'catalogId' will be `$default`. For Shopify `$shopify:::$default:::33001893429341`")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData serverBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData = (ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData) o;
    return Objects.equals(this.type, serverBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData.type) &&
        Objects.equals(this.id, serverBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerBISSubscriptionCreateQueryResourceObjectRelationshipsVariantData {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
