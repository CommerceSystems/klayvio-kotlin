/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
/**
 * PredictiveAnalytics
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T16:09:09.130713678Z[GMT]")

public class PredictiveAnalytics {
  @SerializedName("historic_clv")
  private BigDecimal historicClv = null;

  @SerializedName("predicted_clv")
  private BigDecimal predictedClv = null;

  @SerializedName("total_clv")
  private BigDecimal totalClv = null;

  @SerializedName("historic_number_of_orders")
  private Integer historicNumberOfOrders = null;

  @SerializedName("predicted_number_of_orders")
  private BigDecimal predictedNumberOfOrders = null;

  @SerializedName("average_days_between_orders")
  private BigDecimal averageDaysBetweenOrders = null;

  @SerializedName("average_order_value")
  private BigDecimal averageOrderValue = null;

  @SerializedName("churn_probability")
  private BigDecimal churnProbability = null;

  @SerializedName("expected_date_of_next_order")
  private OffsetDateTime expectedDateOfNextOrder = null;

  public PredictiveAnalytics historicClv(BigDecimal historicClv) {
    this.historicClv = historicClv;
    return this;
  }

   /**
   * Total value of all historically placed orders
   * @return historicClv
  **/
  @Schema(example = "93.87", description = "Total value of all historically placed orders")
  public BigDecimal getHistoricClv() {
    return historicClv;
  }

  public void setHistoricClv(BigDecimal historicClv) {
    this.historicClv = historicClv;
  }

  public PredictiveAnalytics predictedClv(BigDecimal predictedClv) {
    this.predictedClv = predictedClv;
    return this;
  }

   /**
   * Predicted value of all placed orders in the next 365 days
   * @return predictedClv
  **/
  @Schema(example = "27.24", description = "Predicted value of all placed orders in the next 365 days")
  public BigDecimal getPredictedClv() {
    return predictedClv;
  }

  public void setPredictedClv(BigDecimal predictedClv) {
    this.predictedClv = predictedClv;
  }

  public PredictiveAnalytics totalClv(BigDecimal totalClv) {
    this.totalClv = totalClv;
    return this;
  }

   /**
   * Sum of historic and predicted CLV
   * @return totalClv
  **/
  @Schema(example = "121.11", description = "Sum of historic and predicted CLV")
  public BigDecimal getTotalClv() {
    return totalClv;
  }

  public void setTotalClv(BigDecimal totalClv) {
    this.totalClv = totalClv;
  }

  public PredictiveAnalytics historicNumberOfOrders(Integer historicNumberOfOrders) {
    this.historicNumberOfOrders = historicNumberOfOrders;
    return this;
  }

   /**
   * Number of already placed orders
   * @return historicNumberOfOrders
  **/
  @Schema(example = "2", description = "Number of already placed orders")
  public Integer getHistoricNumberOfOrders() {
    return historicNumberOfOrders;
  }

  public void setHistoricNumberOfOrders(Integer historicNumberOfOrders) {
    this.historicNumberOfOrders = historicNumberOfOrders;
  }

  public PredictiveAnalytics predictedNumberOfOrders(BigDecimal predictedNumberOfOrders) {
    this.predictedNumberOfOrders = predictedNumberOfOrders;
    return this;
  }

   /**
   * Predicted number of placed orders in the next 365 days
   * @return predictedNumberOfOrders
  **/
  @Schema(example = "0.54", description = "Predicted number of placed orders in the next 365 days")
  public BigDecimal getPredictedNumberOfOrders() {
    return predictedNumberOfOrders;
  }

  public void setPredictedNumberOfOrders(BigDecimal predictedNumberOfOrders) {
    this.predictedNumberOfOrders = predictedNumberOfOrders;
  }

  public PredictiveAnalytics averageDaysBetweenOrders(BigDecimal averageDaysBetweenOrders) {
    this.averageDaysBetweenOrders = averageDaysBetweenOrders;
    return this;
  }

   /**
   * Average number of days between orders (None if only one order has been placed)
   * @return averageDaysBetweenOrders
  **/
  @Schema(example = "189", description = "Average number of days between orders (None if only one order has been placed)")
  public BigDecimal getAverageDaysBetweenOrders() {
    return averageDaysBetweenOrders;
  }

  public void setAverageDaysBetweenOrders(BigDecimal averageDaysBetweenOrders) {
    this.averageDaysBetweenOrders = averageDaysBetweenOrders;
  }

  public PredictiveAnalytics averageOrderValue(BigDecimal averageOrderValue) {
    this.averageOrderValue = averageOrderValue;
    return this;
  }

   /**
   * Average value of placed orders
   * @return averageOrderValue
  **/
  @Schema(example = "46.94", description = "Average value of placed orders")
  public BigDecimal getAverageOrderValue() {
    return averageOrderValue;
  }

  public void setAverageOrderValue(BigDecimal averageOrderValue) {
    this.averageOrderValue = averageOrderValue;
  }

  public PredictiveAnalytics churnProbability(BigDecimal churnProbability) {
    this.churnProbability = churnProbability;
    return this;
  }

   /**
   * Probability the customer has churned
   * @return churnProbability
  **/
  @Schema(example = "0.89", description = "Probability the customer has churned")
  public BigDecimal getChurnProbability() {
    return churnProbability;
  }

  public void setChurnProbability(BigDecimal churnProbability) {
    this.churnProbability = churnProbability;
  }

  public PredictiveAnalytics expectedDateOfNextOrder(OffsetDateTime expectedDateOfNextOrder) {
    this.expectedDateOfNextOrder = expectedDateOfNextOrder;
    return this;
  }

   /**
   * Expected date of next order, as calculated at the time of their most recent order
   * @return expectedDateOfNextOrder
  **/
  @Schema(example = "2022-11-08T00:00Z", description = "Expected date of next order, as calculated at the time of their most recent order")
  public OffsetDateTime getExpectedDateOfNextOrder() {
    return expectedDateOfNextOrder;
  }

  public void setExpectedDateOfNextOrder(OffsetDateTime expectedDateOfNextOrder) {
    this.expectedDateOfNextOrder = expectedDateOfNextOrder;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictiveAnalytics predictiveAnalytics = (PredictiveAnalytics) o;
    return Objects.equals(this.historicClv, predictiveAnalytics.historicClv) &&
        Objects.equals(this.predictedClv, predictiveAnalytics.predictedClv) &&
        Objects.equals(this.totalClv, predictiveAnalytics.totalClv) &&
        Objects.equals(this.historicNumberOfOrders, predictiveAnalytics.historicNumberOfOrders) &&
        Objects.equals(this.predictedNumberOfOrders, predictiveAnalytics.predictedNumberOfOrders) &&
        Objects.equals(this.averageDaysBetweenOrders, predictiveAnalytics.averageDaysBetweenOrders) &&
        Objects.equals(this.averageOrderValue, predictiveAnalytics.averageOrderValue) &&
        Objects.equals(this.churnProbability, predictiveAnalytics.churnProbability) &&
        Objects.equals(this.expectedDateOfNextOrder, predictiveAnalytics.expectedDateOfNextOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(historicClv, predictedClv, totalClv, historicNumberOfOrders, predictedNumberOfOrders, averageDaysBetweenOrders, averageOrderValue, churnProbability, expectedDateOfNextOrder);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictiveAnalytics {\n");
    
    sb.append("    historicClv: ").append(toIndentedString(historicClv)).append("\n");
    sb.append("    predictedClv: ").append(toIndentedString(predictedClv)).append("\n");
    sb.append("    totalClv: ").append(toIndentedString(totalClv)).append("\n");
    sb.append("    historicNumberOfOrders: ").append(toIndentedString(historicNumberOfOrders)).append("\n");
    sb.append("    predictedNumberOfOrders: ").append(toIndentedString(predictedNumberOfOrders)).append("\n");
    sb.append("    averageDaysBetweenOrders: ").append(toIndentedString(averageDaysBetweenOrders)).append("\n");
    sb.append("    averageOrderValue: ").append(toIndentedString(averageOrderValue)).append("\n");
    sb.append("    churnProbability: ").append(toIndentedString(churnProbability)).append("\n");
    sb.append("    expectedDateOfNextOrder: ").append(toIndentedString(expectedDateOfNextOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
