/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CatalogCategoryCreateJobCreateQuery;
import io.swagger.client.model.CatalogCategoryCreateQuery;
import io.swagger.client.model.CatalogCategoryDeleteJobCreateQuery;
import io.swagger.client.model.CatalogCategoryItemOp;
import io.swagger.client.model.CatalogCategoryUpdateJobCreateQuery;
import io.swagger.client.model.CatalogCategoryUpdateQuery;
import io.swagger.client.model.CatalogItemCategoryOp;
import io.swagger.client.model.CatalogItemCreateJobCreateQuery;
import io.swagger.client.model.CatalogItemCreateQuery;
import io.swagger.client.model.CatalogItemDeleteJobCreateQuery;
import io.swagger.client.model.CatalogItemUpdateJobCreateQuery;
import io.swagger.client.model.CatalogItemUpdateQuery;
import io.swagger.client.model.CatalogVariantCreateJobCreateQuery;
import io.swagger.client.model.CatalogVariantCreateQuery;
import io.swagger.client.model.CatalogVariantDeleteJobCreateQuery;
import io.swagger.client.model.CatalogVariantUpdateJobCreateQuery;
import io.swagger.client.model.CatalogVariantUpdateQuery;
import io.swagger.client.model.GetCatalogCategoryCreateJobResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogCategoryCreateJobResponseCompoundDocument;
import io.swagger.client.model.GetCatalogCategoryDeleteJobResponse;
import io.swagger.client.model.GetCatalogCategoryDeleteJobResponseCollection;
import io.swagger.client.model.GetCatalogCategoryItemListResponseCollection;
import io.swagger.client.model.GetCatalogCategoryResponse;
import io.swagger.client.model.GetCatalogCategoryResponseCollection;
import io.swagger.client.model.GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogCategoryUpdateJobResponseCompoundDocument;
import io.swagger.client.model.GetCatalogItemCategoryListResponseCollection;
import io.swagger.client.model.GetCatalogItemCreateJobResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogItemCreateJobResponseCompoundDocument;
import io.swagger.client.model.GetCatalogItemDeleteJobResponse;
import io.swagger.client.model.GetCatalogItemDeleteJobResponseCollection;
import io.swagger.client.model.GetCatalogItemResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogItemResponseCompoundDocument;
import io.swagger.client.model.GetCatalogItemUpdateJobResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogItemUpdateJobResponseCompoundDocument;
import io.swagger.client.model.GetCatalogVariantCreateJobResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogVariantCreateJobResponseCompoundDocument;
import io.swagger.client.model.GetCatalogVariantDeleteJobResponse;
import io.swagger.client.model.GetCatalogVariantDeleteJobResponseCollection;
import io.swagger.client.model.GetCatalogVariantResponse;
import io.swagger.client.model.GetCatalogVariantResponseCollection;
import io.swagger.client.model.GetCatalogVariantUpdateJobResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCatalogVariantUpdateJobResponseCompoundDocument;
import io.swagger.client.model.InlineResponse4XX;
import io.swagger.client.model.PatchCatalogCategoryResponse;
import io.swagger.client.model.PatchCatalogItemResponse;
import io.swagger.client.model.PatchCatalogVariantResponse;
import io.swagger.client.model.PostCatalogCategoryCreateJobResponse;
import io.swagger.client.model.PostCatalogCategoryDeleteJobResponse;
import io.swagger.client.model.PostCatalogCategoryResponse;
import io.swagger.client.model.PostCatalogCategoryUpdateJobResponse;
import io.swagger.client.model.PostCatalogItemCreateJobResponse;
import io.swagger.client.model.PostCatalogItemDeleteJobResponse;
import io.swagger.client.model.PostCatalogItemResponse;
import io.swagger.client.model.PostCatalogItemUpdateJobResponse;
import io.swagger.client.model.PostCatalogVariantCreateJobResponse;
import io.swagger.client.model.PostCatalogVariantDeleteJobResponse;
import io.swagger.client.model.PostCatalogVariantResponse;
import io.swagger.client.model.PostCatalogVariantUpdateJobResponse;
import io.swagger.client.model.ServerBISSubscriptionCreateQuery;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CatalogsApi
 */
@Ignore
public class CatalogsApiTest {

    private final CatalogsApi api = new CatalogsApi();

    /**
     * Create Back In Stock Subscription
     *
     * Subscribe a profile to receive back in stock notifications. Check out [our Back in Stock API guide](https://developers.klaviyo.com/en/docs/how_to_set_up_custom_back_in_stock) for more details.  This endpoint is specifically designed to be called from server-side applications. To create subscriptions from client-side contexts, use [POST /client/back-in-stock-subscriptions](https://developers.klaviyo.com/en/reference/create_client_back_in_stock_subscription).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60; &#x60;profiles:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBackInStockSubscriptionTest() throws Exception {
        ServerBISSubscriptionCreateQuery body = null;
        String revision = null;
        api.createBackInStockSubscription(body, revision);

        // TODO: test validations
    }
    /**
     * Create Catalog Category
     *
     * Create a new catalog category.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCatalogCategoryTest() throws Exception {
        CatalogCategoryCreateQuery body = null;
        String revision = null;
        PostCatalogCategoryResponse response = api.createCatalogCategory(body, revision);

        // TODO: test validations
    }
    /**
     * Create Catalog Category Relationships Items
     *
     * Create a new item relationship for the given category ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCatalogCategoryRelationshipsItemsTest() throws Exception {
        CatalogCategoryItemOp body = null;
        String revision = null;
        String id = null;
        api.createCatalogCategoryRelationshipsItems(body, revision, id);

        // TODO: test validations
    }
    /**
     * Create Catalog Item
     *
     * Create a new catalog item.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCatalogItemTest() throws Exception {
        CatalogItemCreateQuery body = null;
        String revision = null;
        PostCatalogItemResponse response = api.createCatalogItem(body, revision);

        // TODO: test validations
    }
    /**
     * Create Catalog Item Relationships Categories
     *
     * Create a new catalog category relationship for the given item ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCatalogItemRelationshipsCategoriesTest() throws Exception {
        CatalogItemCategoryOp body = null;
        String revision = null;
        String id = null;
        api.createCatalogItemRelationshipsCategories(body, revision, id);

        // TODO: test validations
    }
    /**
     * Create Catalog Variant
     *
     * Create a new variant for a related catalog item.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCatalogVariantTest() throws Exception {
        CatalogVariantCreateQuery body = null;
        String revision = null;
        PostCatalogVariantResponse response = api.createCatalogVariant(body, revision);

        // TODO: test validations
    }
    /**
     * Delete Catalog Category
     *
     * Delete a catalog category using the given category ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogCategoryTest() throws Exception {
        String id = null;
        String revision = null;
        api.deleteCatalogCategory(id, revision);

        // TODO: test validations
    }
    /**
     * Delete Catalog Category Relationships Items
     *
     * Delete item relationships for the given category ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogCategoryRelationshipsItemsTest() throws Exception {
        CatalogCategoryItemOp body = null;
        String revision = null;
        String id = null;
        api.deleteCatalogCategoryRelationshipsItems(body, revision, id);

        // TODO: test validations
    }
    /**
     * Delete Catalog Item
     *
     * Delete a catalog item with the given item ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogItemTest() throws Exception {
        String id = null;
        String revision = null;
        api.deleteCatalogItem(id, revision);

        // TODO: test validations
    }
    /**
     * Delete Catalog Item Relationships Categories
     *
     * Delete catalog category relationships for the given item ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogItemRelationshipsCategoriesTest() throws Exception {
        CatalogItemCategoryOp body = null;
        String revision = null;
        String id = null;
        api.deleteCatalogItemRelationshipsCategories(body, revision, id);

        // TODO: test validations
    }
    /**
     * Delete Catalog Variant
     *
     * Delete a catalog item variant with the given variant ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogVariantTest() throws Exception {
        String id = null;
        String revision = null;
        api.deleteCatalogVariant(id, revision);

        // TODO: test validations
    }
    /**
     * Get Catalog Categories
     *
     * Get all catalog categories in an account.  Catalog categories can be sorted by the following fields, in ascending and descending order: &#x60;created&#x60;  Currently, the only supported integration type is &#x60;$custom&#x60;, and the only supported catalog type is &#x60;$default&#x60;.  Returns a maximum of 100 categories per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogCategoriesTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogCategory = null;
        String filter = null;
        String pageCursor = null;
        String sort = null;
        GetCatalogCategoryResponseCollection response = api.getCatalogCategories(revision, fieldsCatalogCategory, filter, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Catalog Category
     *
     * Get a catalog category with the given category ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogCategoryTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCatalogCategory = null;
        GetCatalogCategoryResponse response = api.getCatalogCategory(id, revision, fieldsCatalogCategory);

        // TODO: test validations
    }
    /**
     * Get Catalog Category Items
     *
     * Get all items in a category with the given category ID.  Items can be sorted by the following fields, in ascending and descending order: &#x60;created&#x60;  Returns a maximum of 100 items per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogCategoryItemsTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCatalogItem = null;
        List<String> fieldsCatalogVariant = null;
        String filter = null;
        List<String> include = null;
        String pageCursor = null;
        String sort = null;
        GetCatalogItemResponseCollectionCompoundDocument response = api.getCatalogCategoryItems(id, revision, fieldsCatalogItem, fieldsCatalogVariant, filter, include, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Catalog Category Relationships Items
     *
     * Get all items in the given category ID.  Returns a maximum of 100 items per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogCategoryRelationshipsItemsTest() throws Exception {
        String id = null;
        String revision = null;
        String pageCursor = null;
        GetCatalogCategoryItemListResponseCollection response = api.getCatalogCategoryRelationshipsItems(id, revision, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Catalog Item
     *
     * Get a specific catalog item with the given item ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCatalogItem = null;
        List<String> fieldsCatalogVariant = null;
        List<String> include = null;
        GetCatalogItemResponseCompoundDocument response = api.getCatalogItem(id, revision, fieldsCatalogItem, fieldsCatalogVariant, include);

        // TODO: test validations
    }
    /**
     * Get Catalog Item Categories
     *
     * Get all catalog categories that an item with the given item ID is in.  Catalog categories can be sorted by the following fields, in ascending and descending order: &#x60;created&#x60;  Returns a maximum of 100 categories per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemCategoriesTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCatalogCategory = null;
        String filter = null;
        String pageCursor = null;
        String sort = null;
        GetCatalogCategoryResponseCollection response = api.getCatalogItemCategories(id, revision, fieldsCatalogCategory, filter, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Catalog Item Relationships Categories
     *
     * Get all catalog categories that a particular item is in.  Returns a maximum of 100 categories per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemRelationshipsCategoriesTest() throws Exception {
        String id = null;
        String revision = null;
        String pageCursor = null;
        GetCatalogItemCategoryListResponseCollection response = api.getCatalogItemRelationshipsCategories(id, revision, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Catalog Item Variants
     *
     * Get all variants related to the given item ID.  Variants can be sorted by the following fields, in ascending and descending order: &#x60;created&#x60;  Returns a maximum of 100 variants per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemVariantsTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCatalogVariant = null;
        String filter = null;
        String pageCursor = null;
        String sort = null;
        GetCatalogVariantResponseCollection response = api.getCatalogItemVariants(id, revision, fieldsCatalogVariant, filter, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Catalog Items
     *
     * Get all catalog items in an account.  Catalog items can be sorted by the following fields, in ascending and descending order: &#x60;created&#x60;  Currently, the only supported integration type is &#x60;$custom&#x60;, and the only supported catalog type is &#x60;$default&#x60;.  Returns a maximum of 100 items per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogItem = null;
        List<String> fieldsCatalogVariant = null;
        String filter = null;
        List<String> include = null;
        String pageCursor = null;
        String sort = null;
        GetCatalogItemResponseCollectionCompoundDocument response = api.getCatalogItems(revision, fieldsCatalogItem, fieldsCatalogVariant, filter, include, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Catalog Variant
     *
     * Get a catalog item variant with the given variant ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogVariantTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCatalogVariant = null;
        GetCatalogVariantResponse response = api.getCatalogVariant(id, revision, fieldsCatalogVariant);

        // TODO: test validations
    }
    /**
     * Get Catalog Variants
     *
     * Get all variants in an account.  Variants can be sorted by the following fields, in ascending and descending order: &#x60;created&#x60;  Currently, the only supported integration type is &#x60;$custom&#x60;, and the only supported catalog type is &#x60;$default&#x60;.  Returns a maximum of 100 variants per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCatalogVariantsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogVariant = null;
        String filter = null;
        String pageCursor = null;
        String sort = null;
        GetCatalogVariantResponseCollection response = api.getCatalogVariants(revision, fieldsCatalogVariant, filter, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Create Categories Job
     *
     * Get a catalog category bulk create job with the given job ID.  An &#x60;include&#x60; parameter can be provided to get the following related resource data: &#x60;categories&#x60;.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCreateCategoriesJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogCategoryBulkCreateJob = null;
        List<String> fieldsCatalogCategory = null;
        List<String> include = null;
        GetCatalogCategoryCreateJobResponseCompoundDocument response = api.getCreateCategoriesJob(jobId, revision, fieldsCatalogCategoryBulkCreateJob, fieldsCatalogCategory, include);

        // TODO: test validations
    }
    /**
     * Get Create Categories Jobs
     *
     * Get all catalog category bulk create jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCreateCategoriesJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogCategoryBulkCreateJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogCategoryCreateJobResponseCollectionCompoundDocument response = api.getCreateCategoriesJobs(revision, fieldsCatalogCategoryBulkCreateJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Create Items Job
     *
     * Get a catalog item bulk create job with the given job ID.  An &#x60;include&#x60; parameter can be provided to get the following related resource data: &#x60;items&#x60;.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCreateItemsJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogItemBulkCreateJob = null;
        List<String> fieldsCatalogItem = null;
        List<String> include = null;
        GetCatalogItemCreateJobResponseCompoundDocument response = api.getCreateItemsJob(jobId, revision, fieldsCatalogItemBulkCreateJob, fieldsCatalogItem, include);

        // TODO: test validations
    }
    /**
     * Get Create Items Jobs
     *
     * Get all catalog item bulk create jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCreateItemsJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogItemBulkCreateJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogItemCreateJobResponseCollectionCompoundDocument response = api.getCreateItemsJobs(revision, fieldsCatalogItemBulkCreateJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Create Variants Job
     *
     * Get a catalog variant bulk create job with the given job ID.  An &#x60;include&#x60; parameter can be provided to get the following related resource data: &#x60;variants&#x60;.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCreateVariantsJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogVariantBulkCreateJob = null;
        List<String> fieldsCatalogVariant = null;
        List<String> include = null;
        GetCatalogVariantCreateJobResponseCompoundDocument response = api.getCreateVariantsJob(jobId, revision, fieldsCatalogVariantBulkCreateJob, fieldsCatalogVariant, include);

        // TODO: test validations
    }
    /**
     * Get Create Variants Jobs
     *
     * Get all catalog variant bulk create jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCreateVariantsJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogVariantBulkCreateJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogVariantCreateJobResponseCollectionCompoundDocument response = api.getCreateVariantsJobs(revision, fieldsCatalogVariantBulkCreateJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Delete Categories Job
     *
     * Get a catalog category bulk delete job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeleteCategoriesJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogCategoryBulkDeleteJob = null;
        GetCatalogCategoryDeleteJobResponse response = api.getDeleteCategoriesJob(jobId, revision, fieldsCatalogCategoryBulkDeleteJob);

        // TODO: test validations
    }
    /**
     * Get Delete Categories Jobs
     *
     * Get all catalog category bulk delete jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeleteCategoriesJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogCategoryBulkDeleteJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogCategoryDeleteJobResponseCollection response = api.getDeleteCategoriesJobs(revision, fieldsCatalogCategoryBulkDeleteJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Delete Items Job
     *
     * Get a catalog item bulk delete job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeleteItemsJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogItemBulkDeleteJob = null;
        GetCatalogItemDeleteJobResponse response = api.getDeleteItemsJob(jobId, revision, fieldsCatalogItemBulkDeleteJob);

        // TODO: test validations
    }
    /**
     * Get Delete Items Jobs
     *
     * Get all catalog item bulk delete jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeleteItemsJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogItemBulkDeleteJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogItemDeleteJobResponseCollection response = api.getDeleteItemsJobs(revision, fieldsCatalogItemBulkDeleteJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Delete Variants Job
     *
     * Get a catalog variant bulk delete job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeleteVariantsJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogVariantBulkDeleteJob = null;
        GetCatalogVariantDeleteJobResponse response = api.getDeleteVariantsJob(jobId, revision, fieldsCatalogVariantBulkDeleteJob);

        // TODO: test validations
    }
    /**
     * Get Delete Variants Jobs
     *
     * Get all catalog variant bulk delete jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeleteVariantsJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogVariantBulkDeleteJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogVariantDeleteJobResponseCollection response = api.getDeleteVariantsJobs(revision, fieldsCatalogVariantBulkDeleteJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Update Categories Job
     *
     * Get a catalog category bulk update job with the given job ID.  An &#x60;include&#x60; parameter can be provided to get the following related resource data: &#x60;categories&#x60;.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUpdateCategoriesJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogCategoryBulkUpdateJob = null;
        List<String> fieldsCatalogCategory = null;
        List<String> include = null;
        GetCatalogCategoryUpdateJobResponseCompoundDocument response = api.getUpdateCategoriesJob(jobId, revision, fieldsCatalogCategoryBulkUpdateJob, fieldsCatalogCategory, include);

        // TODO: test validations
    }
    /**
     * Get Update Categories Jobs
     *
     * Get all catalog category bulk update jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUpdateCategoriesJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogCategoryBulkUpdateJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument response = api.getUpdateCategoriesJobs(revision, fieldsCatalogCategoryBulkUpdateJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Update Items Job
     *
     * Get a catalog item bulk update job with the given job ID.  An &#x60;include&#x60; parameter can be provided to get the following related resource data: &#x60;items&#x60;.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUpdateItemsJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogItemBulkUpdateJob = null;
        List<String> fieldsCatalogItem = null;
        List<String> include = null;
        GetCatalogItemUpdateJobResponseCompoundDocument response = api.getUpdateItemsJob(jobId, revision, fieldsCatalogItemBulkUpdateJob, fieldsCatalogItem, include);

        // TODO: test validations
    }
    /**
     * Get Update Items Jobs
     *
     * Get all catalog item bulk update jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUpdateItemsJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogItemBulkUpdateJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogItemUpdateJobResponseCollectionCompoundDocument response = api.getUpdateItemsJobs(revision, fieldsCatalogItemBulkUpdateJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Get Update Variants Job
     *
     * Get a catalog variate bulk update job with the given job ID.  An &#x60;include&#x60; parameter can be provided to get the following related resource data: &#x60;variants&#x60;.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUpdateVariantsJobTest() throws Exception {
        String jobId = null;
        String revision = null;
        List<String> fieldsCatalogVariantBulkUpdateJob = null;
        List<String> fieldsCatalogVariant = null;
        List<String> include = null;
        GetCatalogVariantUpdateJobResponseCompoundDocument response = api.getUpdateVariantsJob(jobId, revision, fieldsCatalogVariantBulkUpdateJob, fieldsCatalogVariant, include);

        // TODO: test validations
    }
    /**
     * Get Update Variants Jobs
     *
     * Get all catalog variant bulk update jobs.  Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;  **Scopes:** &#x60;catalogs:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUpdateVariantsJobsTest() throws Exception {
        String revision = null;
        List<String> fieldsCatalogVariantBulkUpdateJob = null;
        String filter = null;
        String pageCursor = null;
        GetCatalogVariantUpdateJobResponseCollectionCompoundDocument response = api.getUpdateVariantsJobs(revision, fieldsCatalogVariantBulkUpdateJob, filter, pageCursor);

        // TODO: test validations
    }
    /**
     * Spawn Create Categories Job
     *
     * Create a catalog category bulk create job to create a batch of catalog categories.  Accepts up to 100 catalog categories per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnCreateCategoriesJobTest() throws Exception {
        CatalogCategoryCreateJobCreateQuery body = null;
        String revision = null;
        PostCatalogCategoryCreateJobResponse response = api.spawnCreateCategoriesJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Create Items Job
     *
     * Create a catalog item bulk create job to create a batch of catalog items.  Accepts up to 100 catalog items per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnCreateItemsJobTest() throws Exception {
        CatalogItemCreateJobCreateQuery body = null;
        String revision = null;
        PostCatalogItemCreateJobResponse response = api.spawnCreateItemsJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Create Variants Job
     *
     * Create a catalog variant bulk create job to create a batch of catalog variants.  Accepts up to 100 catalog variants per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnCreateVariantsJobTest() throws Exception {
        CatalogVariantCreateJobCreateQuery body = null;
        String revision = null;
        PostCatalogVariantCreateJobResponse response = api.spawnCreateVariantsJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Delete Categories Job
     *
     * Create a catalog category bulk delete job to delete a batch of catalog categories.  Accepts up to 100 catalog categories per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnDeleteCategoriesJobTest() throws Exception {
        CatalogCategoryDeleteJobCreateQuery body = null;
        String revision = null;
        PostCatalogCategoryDeleteJobResponse response = api.spawnDeleteCategoriesJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Delete Items Job
     *
     * Create a catalog item bulk delete job to delete a batch of catalog items.  Accepts up to 100 catalog items per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnDeleteItemsJobTest() throws Exception {
        CatalogItemDeleteJobCreateQuery body = null;
        String revision = null;
        PostCatalogItemDeleteJobResponse response = api.spawnDeleteItemsJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Delete Variants Job
     *
     * Create a catalog variant bulk delete job to delete a batch of catalog variants.  Accepts up to 100 catalog variants per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnDeleteVariantsJobTest() throws Exception {
        CatalogVariantDeleteJobCreateQuery body = null;
        String revision = null;
        PostCatalogVariantDeleteJobResponse response = api.spawnDeleteVariantsJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Update Categories Job
     *
     * Create a catalog category bulk update job to update a batch of catalog categories.  Accepts up to 100 catalog categories per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnUpdateCategoriesJobTest() throws Exception {
        CatalogCategoryUpdateJobCreateQuery body = null;
        String revision = null;
        PostCatalogCategoryUpdateJobResponse response = api.spawnUpdateCategoriesJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Update Items Job
     *
     * Create a catalog item bulk update job to update a batch of catalog items.  Accepts up to 100 catalog items per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnUpdateItemsJobTest() throws Exception {
        CatalogItemUpdateJobCreateQuery body = null;
        String revision = null;
        PostCatalogItemUpdateJobResponse response = api.spawnUpdateItemsJob(body, revision);

        // TODO: test validations
    }
    /**
     * Spawn Update Variants Job
     *
     * Create a catalog variant bulk update job to update a batch of catalog variants.  Accepts up to 100 catalog variants per request. The maximum allowed payload size is 5MB. The maximum number of jobs in progress at one time is 500.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spawnUpdateVariantsJobTest() throws Exception {
        CatalogVariantUpdateJobCreateQuery body = null;
        String revision = null;
        PostCatalogVariantUpdateJobResponse response = api.spawnUpdateVariantsJob(body, revision);

        // TODO: test validations
    }
    /**
     * Update Catalog Category
     *
     * Update a catalog category with the given category ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCatalogCategoryTest() throws Exception {
        CatalogCategoryUpdateQuery body = null;
        String revision = null;
        String id = null;
        PatchCatalogCategoryResponse response = api.updateCatalogCategory(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Catalog Category Relationships Items
     *
     * Update item relationships for the given category ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCatalogCategoryRelationshipsItemsTest() throws Exception {
        CatalogCategoryItemOp body = null;
        String revision = null;
        String id = null;
        api.updateCatalogCategoryRelationshipsItems(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Catalog Item
     *
     * Update a catalog item with the given item ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCatalogItemTest() throws Exception {
        CatalogItemUpdateQuery body = null;
        String revision = null;
        String id = null;
        PatchCatalogItemResponse response = api.updateCatalogItem(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Catalog Item Relationships Categories
     *
     * Update catalog category relationships for the given item ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCatalogItemRelationshipsCategoriesTest() throws Exception {
        CatalogItemCategoryOp body = null;
        String revision = null;
        String id = null;
        api.updateCatalogItemRelationshipsCategories(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Catalog Variant
     *
     * Update a catalog item variant with the given variant ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;75/s&#x60;&lt;br&gt;Steady: &#x60;700/m&#x60;  **Scopes:** &#x60;catalogs:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCatalogVariantTest() throws Exception {
        CatalogVariantUpdateQuery body = null;
        String revision = null;
        String id = null;
        PatchCatalogVariantResponse response = api.updateCatalogVariant(body, revision, id);

        // TODO: test validations
    }
}
