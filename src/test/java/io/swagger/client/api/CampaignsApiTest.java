/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CampaignCloneQuery;
import io.swagger.client.model.CampaignCreateQuery;
import io.swagger.client.model.CampaignMessageAssignTemplateQuery;
import io.swagger.client.model.CampaignMessagePartialUpdateQuery;
import io.swagger.client.model.CampaignPartialUpdateQuery;
import io.swagger.client.model.CampaignRecipientEstimationJobCreateQuery;
import io.swagger.client.model.CampaignSendJobCreateQuery;
import io.swagger.client.model.CampaignSendJobPartialUpdateQuery;
import io.swagger.client.model.GetCampaignMessageCampaignRelationshipListResponse;
import io.swagger.client.model.GetCampaignMessageResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCampaignMessageResponseCompoundDocument;
import io.swagger.client.model.GetCampaignMessageTemplateRelationshipListResponse;
import io.swagger.client.model.GetCampaignMessagesRelationshipListResponseCollection;
import io.swagger.client.model.GetCampaignRecipientEstimationJobResponse;
import io.swagger.client.model.GetCampaignRecipientEstimationResponse;
import io.swagger.client.model.GetCampaignResponse;
import io.swagger.client.model.GetCampaignResponseCollectionCompoundDocument;
import io.swagger.client.model.GetCampaignResponseCompoundDocument;
import io.swagger.client.model.GetCampaignSendJobResponse;
import io.swagger.client.model.GetCampaignTagRelationshipListResponseCollection;
import io.swagger.client.model.GetTagResponseCollection;
import io.swagger.client.model.GetTemplateResponse;
import io.swagger.client.model.InlineResponse4XX;
import io.swagger.client.model.PatchCampaignMessageResponse;
import io.swagger.client.model.PatchCampaignResponse;
import io.swagger.client.model.PostCampaignMessageResponse;
import io.swagger.client.model.PostCampaignRecipientEstimationJobResponse;
import io.swagger.client.model.PostCampaignResponse;
import io.swagger.client.model.PostCampaignSendJobResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CampaignsApi
 */
@Ignore
public class CampaignsApiTest {

    private final CampaignsApi api = new CampaignsApi();

    /**
     * Create Campaign
     *
     * Creates a campaign given a set of parameters, then returns it.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws Exception {
        CampaignCreateQuery body = null;
        String revision = null;
        PostCampaignResponse response = api.createCampaign(body, revision);

        // TODO: test validations
    }
    /**
     * Create Campaign Clone
     *
     * Clones an existing campaign, returning a new campaign based on the original with a new ID and name.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCampaignCloneTest() throws Exception {
        CampaignCloneQuery body = null;
        String revision = null;
        PostCampaignResponse response = api.createCampaignClone(body, revision);

        // TODO: test validations
    }
    /**
     * Assign Campaign Message Template
     *
     * Creates a non-reusable version of the template and assigns it to the message.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCampaignMessageAssignTemplateTest() throws Exception {
        CampaignMessageAssignTemplateQuery body = null;
        String revision = null;
        PostCampaignMessageResponse response = api.createCampaignMessageAssignTemplate(body, revision);

        // TODO: test validations
    }
    /**
     * Create Campaign Recipient Estimation Job
     *
     * Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCampaignRecipientEstimationJobTest() throws Exception {
        CampaignRecipientEstimationJobCreateQuery body = null;
        String revision = null;
        PostCampaignRecipientEstimationJobResponse response = api.createCampaignRecipientEstimationJob(body, revision);

        // TODO: test validations
    }
    /**
     * Create Campaign Send Job
     *
     * Trigger a campaign to send asynchronously&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCampaignSendJobTest() throws Exception {
        CampaignSendJobCreateQuery body = null;
        String revision = null;
        PostCampaignSendJobResponse response = api.createCampaignSendJob(body, revision);

        // TODO: test validations
    }
    /**
     * Delete Campaign
     *
     * Delete a campaign with the given campaign ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignTest() throws Exception {
        String id = null;
        String revision = null;
        api.deleteCampaign(id, revision);

        // TODO: test validations
    }
    /**
     * Get Campaign
     *
     * Returns a specific campaign based on a required id.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaignMessage = null;
        List<String> fieldsCampaign = null;
        List<String> fieldsTag = null;
        List<String> include = null;
        GetCampaignResponseCompoundDocument response = api.getCampaign(id, revision, fieldsCampaignMessage, fieldsCampaign, fieldsTag, include);

        // TODO: test validations
    }
    /**
     * Get Campaign Campaign Messages
     *
     * Return all messages that belong to the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignCampaignMessagesTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaignMessage = null;
        List<String> fieldsCampaign = null;
        List<String> fieldsTemplate = null;
        List<String> include = null;
        GetCampaignMessageResponseCollectionCompoundDocument response = api.getCampaignCampaignMessages(id, revision, fieldsCampaignMessage, fieldsCampaign, fieldsTemplate, include);

        // TODO: test validations
    }
    /**
     * Get Campaign Message
     *
     * Returns a specific message based on a required id.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignMessageTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaignMessage = null;
        List<String> fieldsCampaign = null;
        List<String> fieldsTemplate = null;
        List<String> include = null;
        GetCampaignMessageResponseCompoundDocument response = api.getCampaignMessage(id, revision, fieldsCampaignMessage, fieldsCampaign, fieldsTemplate, include);

        // TODO: test validations
    }
    /**
     * Get Campaign Message Campaign
     *
     * Return the related campaign&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignMessageCampaignTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaign = null;
        GetCampaignResponse response = api.getCampaignMessageCampaign(id, revision, fieldsCampaign);

        // TODO: test validations
    }
    /**
     * Get Campaign Message Relationships Campaign
     *
     * Returns the ID of the related campaign&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignMessageRelationshipsCampaignTest() throws Exception {
        String id = null;
        String revision = null;
        GetCampaignMessageCampaignRelationshipListResponse response = api.getCampaignMessageRelationshipsCampaign(id, revision);

        // TODO: test validations
    }
    /**
     * Get Campaign Message Relationships Template
     *
     * Returns the ID of the related template&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;templates:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignMessageRelationshipsTemplateTest() throws Exception {
        String id = null;
        String revision = null;
        GetCampaignMessageTemplateRelationshipListResponse response = api.getCampaignMessageRelationshipsTemplate(id, revision);

        // TODO: test validations
    }
    /**
     * Get Campaign Message Template
     *
     * Return the related template&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;templates:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignMessageTemplateTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsTemplate = null;
        GetTemplateResponse response = api.getCampaignMessageTemplate(id, revision, fieldsTemplate);

        // TODO: test validations
    }
    /**
     * Get Campaign Recipient Estimation
     *
     * Get the estimated recipient count for a campaign with the provided campaign ID. You can refresh this count by using the &#x60;Create Campaign Recipient Estimation Job&#x60; endpoint.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignRecipientEstimationTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaignRecipientEstimation = null;
        GetCampaignRecipientEstimationResponse response = api.getCampaignRecipientEstimation(id, revision, fieldsCampaignRecipientEstimation);

        // TODO: test validations
    }
    /**
     * Get Campaign Recipient Estimation Job
     *
     * Retrieve the status of a recipient estimation job triggered with the &#x60;Create Campaign Recipient Estimation Job&#x60; endpoint.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignRecipientEstimationJobTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaignRecipientEstimationJob = null;
        GetCampaignRecipientEstimationJobResponse response = api.getCampaignRecipientEstimationJob(id, revision, fieldsCampaignRecipientEstimationJob);

        // TODO: test validations
    }
    /**
     * Get Campaign Relationships Campaign Messages
     *
     * Returns the IDs of all messages associated with the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignRelationshipsCampaignMessagesTest() throws Exception {
        String id = null;
        String revision = null;
        GetCampaignMessagesRelationshipListResponseCollection response = api.getCampaignRelationshipsCampaignMessages(id, revision);

        // TODO: test validations
    }
    /**
     * Get Campaign Relationships Tags
     *
     * Returns the IDs of all tags associated with the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignRelationshipsTagsTest() throws Exception {
        String id = null;
        String revision = null;
        GetCampaignTagRelationshipListResponseCollection response = api.getCampaignRelationshipsTags(id, revision);

        // TODO: test validations
    }
    /**
     * Get Campaign Send Job
     *
     * Get a campaign send job&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignSendJobTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsCampaignSendJob = null;
        GetCampaignSendJobResponse response = api.getCampaignSendJob(id, revision, fieldsCampaignSendJob);

        // TODO: test validations
    }
    /**
     * Get Campaign Tags
     *
     * Return all tags that belong to the given campaign.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignTagsTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsTag = null;
        GetTagResponseCollection response = api.getCampaignTags(id, revision, fieldsTag);

        // TODO: test validations
    }
    /**
     * Get Campaigns
     *
     * Returns some or all campaigns based on filters.  A channel filter is required to list campaigns. Please provide either: &#x60;?filter&#x3D;equals(messages.channel,&#x27;email&#x27;)&#x60; to list email campaigns, or &#x60;?filter&#x3D;equals(messages.channel,&#x27;sms&#x27;)&#x60; to list SMS campaigns.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCampaignsTest() throws Exception {
        String filter = null;
        String revision = null;
        List<String> fieldsCampaignMessage = null;
        List<String> fieldsCampaign = null;
        List<String> fieldsTag = null;
        List<String> include = null;
        String pageCursor = null;
        String sort = null;
        GetCampaignResponseCollectionCompoundDocument response = api.getCampaigns(filter, revision, fieldsCampaignMessage, fieldsCampaign, fieldsTag, include, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Update Campaign
     *
     * Update a campaign with the given campaign ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws Exception {
        CampaignPartialUpdateQuery body = null;
        String revision = null;
        String id = null;
        PatchCampaignResponse response = api.updateCampaign(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Campaign Message
     *
     * Update a campaign message&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCampaignMessageTest() throws Exception {
        CampaignMessagePartialUpdateQuery body = null;
        String revision = null;
        String id = null;
        PatchCampaignMessageResponse response = api.updateCampaignMessage(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Campaign Send Job
     *
     * Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCampaignSendJobTest() throws Exception {
        CampaignSendJobPartialUpdateQuery body = null;
        String revision = null;
        String id = null;
        api.updateCampaignSendJob(body, revision, id);

        // TODO: test validations
    }
}
