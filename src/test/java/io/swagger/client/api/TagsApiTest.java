/*
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2024-07-15
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DeleteTagGroupResponse;
import io.swagger.client.model.GetTagCampaignRelationshipsResponseCollection;
import io.swagger.client.model.GetTagFlowRelationshipsResponseCollection;
import io.swagger.client.model.GetTagGroupResponse;
import io.swagger.client.model.GetTagGroupResponseCollection;
import io.swagger.client.model.GetTagGroupTagRelationshipsResponseCollection;
import io.swagger.client.model.GetTagListRelationshipsResponseCollection;
import io.swagger.client.model.GetTagResponseCollection;
import io.swagger.client.model.GetTagResponseCollectionCompoundDocument;
import io.swagger.client.model.GetTagResponseCompoundDocument;
import io.swagger.client.model.GetTagSegmentRelationshipsResponseCollection;
import io.swagger.client.model.GetTagTagGroupRelationshipsResponse;
import io.swagger.client.model.InlineResponse4XX;
import io.swagger.client.model.PatchTagGroupResponse;
import io.swagger.client.model.PostTagGroupResponse;
import io.swagger.client.model.PostTagResponse;
import io.swagger.client.model.TagCampaignOp;
import io.swagger.client.model.TagCreateQuery;
import io.swagger.client.model.TagFlowOp;
import io.swagger.client.model.TagGroupCreateQuery;
import io.swagger.client.model.TagGroupUpdateQuery;
import io.swagger.client.model.TagListOp;
import io.swagger.client.model.TagSegmentOp;
import io.swagger.client.model.TagUpdateQuery;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TagsApi
 */
@Ignore
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create Tag
     *
     * Create a tag. An account cannot have more than **500** unique tags.  A tag belongs to a single tag group. If the &#x60;tag_group_id&#x60; is not specified, the tag is added to the account&#x27;s default tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTagTest() throws Exception {
        TagCreateQuery body = null;
        String revision = null;
        PostTagResponse response = api.createTag(body, revision);

        // TODO: test validations
    }
    /**
     * Create Tag Group
     *
     * Create a tag group. An account cannot have more than **50** unique tag groups.  If &#x60;exclusive&#x60; is not specified &#x60;true&#x60; or &#x60;false&#x60;, the tag group defaults to non-exclusive.  If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTagGroupTest() throws Exception {
        TagGroupCreateQuery body = null;
        String revision = null;
        PostTagGroupResponse response = api.createTagGroup(body, revision);

        // TODO: test validations
    }
    /**
     * Create Tag Relationships Campaigns
     *
     * Associate a tag with one or more campaigns. Any campaign cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the campaign(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTagRelationshipsCampaignsTest() throws Exception {
        TagCampaignOp body = null;
        String revision = null;
        String id = null;
        api.createTagRelationshipsCampaigns(body, revision, id);

        // TODO: test validations
    }
    /**
     * Create Tag Relationships Flows
     *
     * Associate a tag with one or more flows. Any flow cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the flow(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTagRelationshipsFlowsTest() throws Exception {
        TagFlowOp body = null;
        String revision = null;
        String id = null;
        api.createTagRelationshipsFlows(body, revision, id);

        // TODO: test validations
    }
    /**
     * Create Tag Relationships Lists
     *
     * Associate a tag with one or more lists. Any list cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the lists(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTagRelationshipsListsTest() throws Exception {
        TagListOp body = null;
        String revision = null;
        String id = null;
        api.createTagRelationshipsLists(body, revision, id);

        // TODO: test validations
    }
    /**
     * Create Tag Relationships Segments
     *
     * Associate a tag with one or more segments. Any segment cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the segments(s) that will be associated with the tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTagRelationshipsSegmentsTest() throws Exception {
        TagSegmentOp body = null;
        String revision = null;
        String id = null;
        api.createTagRelationshipsSegments(body, revision, id);

        // TODO: test validations
    }
    /**
     * Delete Tag
     *
     * Delete the tag with the given tag ID. Any associations between the tag and other resources will also be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagTest() throws Exception {
        String id = null;
        String revision = null;
        api.deleteTag(id, revision);

        // TODO: test validations
    }
    /**
     * Delete Tag Group
     *
     * Delete the tag group with the given tag group ID.  Any tags inside that tag group, and any associations between those tags and other resources, will also be removed. The default tag group cannot be deleted.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagGroupTest() throws Exception {
        String id = null;
        String revision = null;
        DeleteTagGroupResponse response = api.deleteTagGroup(id, revision);

        // TODO: test validations
    }
    /**
     * Delete Tag Relationships Campaigns
     *
     * Remove a tag&#x27;s association with one or more campaigns.   Use the request body to pass in the ID(s) of the campaign(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagRelationshipsCampaignsTest() throws Exception {
        TagCampaignOp body = null;
        String revision = null;
        String id = null;
        api.deleteTagRelationshipsCampaigns(body, revision, id);

        // TODO: test validations
    }
    /**
     * Delete Tag Relationships Flows
     *
     * Remove a tag&#x27;s association with one or more flows.   Use the request body to pass in the ID(s) of the flows(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagRelationshipsFlowsTest() throws Exception {
        TagFlowOp body = null;
        String revision = null;
        String id = null;
        api.deleteTagRelationshipsFlows(body, revision, id);

        // TODO: test validations
    }
    /**
     * Delete Tag Relationships Lists
     *
     * Remove a tag&#x27;s association with one or more lists.   Use the request body to pass in the ID(s) of the list(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagRelationshipsListsTest() throws Exception {
        TagListOp body = null;
        String revision = null;
        String id = null;
        api.deleteTagRelationshipsLists(body, revision, id);

        // TODO: test validations
    }
    /**
     * Delete Tag Relationships Segments
     *
     * Remove a tag&#x27;s association with one or more segments.   Use the request body to pass in the ID(s) of the segments(s) whose association with the tag will be removed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:write&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagRelationshipsSegmentsTest() throws Exception {
        TagSegmentOp body = null;
        String revision = null;
        String id = null;
        api.deleteTagRelationshipsSegments(body, revision, id);

        // TODO: test validations
    }
    /**
     * Get Tag
     *
     * Retrieve the tag with the given tag ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsTagGroup = null;
        List<String> fieldsTag = null;
        List<String> include = null;
        GetTagResponseCompoundDocument response = api.getTag(id, revision, fieldsTagGroup, fieldsTag, include);

        // TODO: test validations
    }
    /**
     * Get Tag Group
     *
     * Retrieve the tag group with the given tag group ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagGroupTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsTagGroup = null;
        GetTagGroupResponse response = api.getTagGroup(id, revision, fieldsTagGroup);

        // TODO: test validations
    }
    /**
     * Get Tag Group Relationships Tags
     *
     * Returns the tag IDs of all tags inside the given tag group.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagGroupRelationshipsTagsTest() throws Exception {
        String id = null;
        String revision = null;
        GetTagGroupTagRelationshipsResponseCollection response = api.getTagGroupRelationshipsTags(id, revision);

        // TODO: test validations
    }
    /**
     * Get Tag Group Tags
     *
     * Return the tags for a given tag group ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagGroupTagsTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsTag = null;
        GetTagResponseCollection response = api.getTagGroupTags(id, revision, fieldsTag);

        // TODO: test validations
    }
    /**
     * Get Tag Groups
     *
     * List all tag groups in an account. Every account has one default tag group.  Tag groups can be filtered by &#x60;name&#x60;, &#x60;exclusive&#x60;, and &#x60;default&#x60;, and sorted by &#x60;name&#x60; or &#x60;id&#x60; in ascending or descending order.  Returns a maximum of 25 tag groups per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagGroupsTest() throws Exception {
        String revision = null;
        List<String> fieldsTagGroup = null;
        String filter = null;
        String pageCursor = null;
        String sort = null;
        GetTagGroupResponseCollection response = api.getTagGroups(revision, fieldsTagGroup, filter, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Get Tag Relationships Campaigns
     *
     * Returns the IDs of all campaigns associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;campaigns:read&#x60; &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagRelationshipsCampaignsTest() throws Exception {
        String id = null;
        String revision = null;
        GetTagCampaignRelationshipsResponseCollection response = api.getTagRelationshipsCampaigns(id, revision);

        // TODO: test validations
    }
    /**
     * Get Tag Relationships Flows
     *
     * Returns the IDs of all flows associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;flows:read&#x60; &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagRelationshipsFlowsTest() throws Exception {
        String id = null;
        String revision = null;
        GetTagFlowRelationshipsResponseCollection response = api.getTagRelationshipsFlows(id, revision);

        // TODO: test validations
    }
    /**
     * Get Tag Relationships Lists
     *
     * Returns the IDs of all lists associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;lists:read&#x60; &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagRelationshipsListsTest() throws Exception {
        String id = null;
        String revision = null;
        GetTagListRelationshipsResponseCollection response = api.getTagRelationshipsLists(id, revision);

        // TODO: test validations
    }
    /**
     * Get Tag Relationships Segments
     *
     * Returns the IDs of all segments associated with the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;segments:read&#x60; &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagRelationshipsSegmentsTest() throws Exception {
        String id = null;
        String revision = null;
        GetTagSegmentRelationshipsResponseCollection response = api.getTagRelationshipsSegments(id, revision);

        // TODO: test validations
    }
    /**
     * Get Tag Relationships Tag Group
     *
     * Returns the id of the tag group related to the given tag.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagRelationshipsTagGroupTest() throws Exception {
        String id = null;
        String revision = null;
        GetTagTagGroupRelationshipsResponse response = api.getTagRelationshipsTagGroup(id, revision);

        // TODO: test validations
    }
    /**
     * Get Tag Tag Group
     *
     * Returns the tag group resource for a given tag ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagTagGroupTest() throws Exception {
        String id = null;
        String revision = null;
        List<String> fieldsTagGroup = null;
        GetTagGroupResponse response = api.getTagTagGroup(id, revision, fieldsTagGroup);

        // TODO: test validations
    }
    /**
     * Get Tags
     *
     * List all tags in an account.  Tags can be filtered by &#x60;name&#x60;, and sorted by &#x60;name&#x60; or &#x60;id&#x60; in ascending or descending order.  Returns a maximum of 50 tags per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagsTest() throws Exception {
        String revision = null;
        List<String> fieldsTagGroup = null;
        List<String> fieldsTag = null;
        String filter = null;
        List<String> include = null;
        String pageCursor = null;
        String sort = null;
        GetTagResponseCollectionCompoundDocument response = api.getTags(revision, fieldsTagGroup, fieldsTag, filter, include, pageCursor, sort);

        // TODO: test validations
    }
    /**
     * Update Tag
     *
     * Update the tag with the given tag ID.  Only a tag&#x27;s &#x60;name&#x60; can be changed. A tag cannot be moved from one tag group to another.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTagTest() throws Exception {
        TagUpdateQuery body = null;
        String revision = null;
        String id = null;
        api.updateTag(body, revision, id);

        // TODO: test validations
    }
    /**
     * Update Tag Group
     *
     * Update the tag group with the given tag group ID.  Only a tag group&#x27;s &#x60;name&#x60; can be changed. A tag group&#x27;s &#x60;exclusive&#x60; or &#x60;default&#x60; value cannot be changed.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;  **Scopes:** &#x60;tags:read&#x60; &#x60;tags:write&#x60;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTagGroupTest() throws Exception {
        TagGroupUpdateQuery body = null;
        String revision = null;
        String id = null;
        PatchTagGroupResponse response = api.updateTagGroup(body, revision, id);

        // TODO: test validations
    }
}
