/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.MetricAggregateQueryResourceObjectAttributes

class MetricAggregateQueryResourceObjectAttributesTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MetricAggregateQueryResourceObjectAttributes
        //val modelInstance = MetricAggregateQueryResourceObjectAttributes()

        // to test the property `metricId` - The metric ID used in the aggregation.
        should("test metricId") {
            // uncomment below to test the property
            //modelInstance.metricId shouldBe ("TODO")
        }

        // to test the property `measurements` - Measurement key, e.g. `unique`, `sum_value`, `count`
        should("test measurements") {
            // uncomment below to test the property
            //modelInstance.measurements shouldBe ("TODO")
        }

        // to test the property `filter` - List of filters, must include time range using ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).             These filters follow a similar format to those in `GET` requests, the primary difference is that this endpoint asks for a list.             The time range can be filtered by providing a `greater-or-equal` and a `less-than` filter on the `datetime` field.
        should("test filter") {
            // uncomment below to test the property
            //modelInstance.filter shouldBe ("TODO")
        }

        // to test the property `pageCursor` - Optional pagination cursor to iterate over large result sets
        should("test pageCursor") {
            // uncomment below to test the property
            //modelInstance.pageCursor shouldBe ("TODO")
        }

        // to test the property `interval` - Aggregation interval, e.g. \"hour\", \"day\", \"week\", \"month\"
        should("test interval") {
            // uncomment below to test the property
            //modelInstance.interval shouldBe ("TODO")
        }

        // to test the property `pageSize` - Alter the maximum number of returned rows in a single page of aggregation results
        should("test pageSize") {
            // uncomment below to test the property
            //modelInstance.pageSize shouldBe ("TODO")
        }

        // to test the property `by` - Optional attribute(s) used for partitioning by the aggregation function
        should("test by") {
            // uncomment below to test the property
            //modelInstance.by shouldBe ("TODO")
        }

        // to test the property `returnFields` - Provide fields to limit the returned data
        should("test returnFields") {
            // uncomment below to test the property
            //modelInstance.returnFields shouldBe ("TODO")
        }

        // to test the property `timezone` - The timezone used for processing the query, e.g. `'America/New_York'`.             This field is validated against a list of common timezones from the [IANA Time Zone Database](https://www.iana.org/time-zones).             While most are supported, a few notable exceptions are `Factory`, `Europe/Kyiv` and `Pacific/Kanton`. This field is case-sensitive.
        should("test timezone") {
            // uncomment below to test the property
            //modelInstance.timezone shouldBe ("TODO")
        }

        // to test the property `sort` - Provide a sort key (e.g. -$message)
        should("test sort") {
            // uncomment below to test the property
            //modelInstance.sort shouldBe ("TODO")
        }

    }
}
