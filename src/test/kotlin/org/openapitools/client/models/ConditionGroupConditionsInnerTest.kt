/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ConditionGroupConditionsInner
import org.openapitools.client.models.NumericOperatorFilter
import org.openapitools.client.models.ProfileHasGroupMembershipCondition
import org.openapitools.client.models.ProfileMarketingConsentCondition
import org.openapitools.client.models.ProfileMarketingConsentConditionConsent
import org.openapitools.client.models.ProfileMetricCondition
import org.openapitools.client.models.ProfileMetricConditionTimeframeFilter
import org.openapitools.client.models.ProfileMetricPropertyFilter
import org.openapitools.client.models.ProfileNoGroupMembershipCondition
import org.openapitools.client.models.ProfilePostalCodeDistanceCondition
import org.openapitools.client.models.ProfilePredictiveAnalyticsEnum
import org.openapitools.client.models.ProfilePredictiveAnalyticsNumericCondition
import org.openapitools.client.models.ProfilePredictiveAnalyticsStringCondition
import org.openapitools.client.models.ProfilePredictiveAnalyticsStringFilter
import org.openapitools.client.models.ProfilePropertyCondition
import org.openapitools.client.models.ProfileRegionCondition

class ConditionGroupConditionsInnerTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ConditionGroupConditionsInner
        //val modelInstance = ConditionGroupConditionsInner()

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `isMember`
        should("test isMember") {
            // uncomment below to test the property
            //modelInstance.isMember shouldBe ("TODO")
        }

        // to test the property `groupIds`
        should("test groupIds") {
            // uncomment below to test the property
            //modelInstance.groupIds shouldBe ("TODO")
        }

        // to test the property `timeframeFilter`
        should("test timeframeFilter") {
            // uncomment below to test the property
            //modelInstance.timeframeFilter shouldBe ("TODO")
        }

        // to test the property `metricId`
        should("test metricId") {
            // uncomment below to test the property
            //modelInstance.metricId shouldBe ("TODO")
        }

        // to test the property `measurement` - Measurements for profile metrics.
        should("test measurement") {
            // uncomment below to test the property
            //modelInstance.measurement shouldBe ("TODO")
        }

        // to test the property `measurementFilter`
        should("test measurementFilter") {
            // uncomment below to test the property
            //modelInstance.measurementFilter shouldBe ("TODO")
        }

        // to test the property `consent`
        should("test consent") {
            // uncomment below to test the property
            //modelInstance.consent shouldBe ("TODO")
        }

        // to test the property `countryCode`
        should("test countryCode") {
            // uncomment below to test the property
            //modelInstance.countryCode shouldBe ("TODO")
        }

        // to test the property `postalCode`
        should("test postalCode") {
            // uncomment below to test the property
            //modelInstance.postalCode shouldBe ("TODO")
        }

        // to test the property `unit` - Units for profile postal code distance conditions.
        should("test unit") {
            // uncomment below to test the property
            //modelInstance.unit shouldBe ("TODO")
        }

        // to test the property `filter`
        should("test filter") {
            // uncomment below to test the property
            //modelInstance.filter shouldBe ("TODO")
        }

        // to test the property ``property``
        should("test `property`") {
            // uncomment below to test the property
            //modelInstance.`property` shouldBe ("TODO")
        }

        // to test the property `inRegion`
        should("test inRegion") {
            // uncomment below to test the property
            //modelInstance.inRegion shouldBe ("TODO")
        }

        // to test the property `region` - Regions for profile region conditions.
        should("test region") {
            // uncomment below to test the property
            //modelInstance.region shouldBe ("TODO")
        }

        // to test the property `dimension` - Dimension for string profile predictive analytics conditions.
        should("test dimension") {
            // uncomment below to test the property
            //modelInstance.dimension shouldBe ("TODO")
        }

        // to test the property `metricFilters`
        should("test metricFilters") {
            // uncomment below to test the property
            //modelInstance.metricFilters shouldBe ("TODO")
        }

    }
}
