/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.EventCreateQueryV2ResourceObjectAttributes
import org.openapitools.client.models.EventCreateQueryV2ResourceObjectAttributesMetric
import org.openapitools.client.models.EventCreateQueryV2ResourceObjectAttributesProfile

class EventCreateQueryV2ResourceObjectAttributesTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of EventCreateQueryV2ResourceObjectAttributes
        //val modelInstance = EventCreateQueryV2ResourceObjectAttributes()

        // to test the property `properties` - Properties of this event. Any top level property (that are not objects) can be used to create segments. The $extra property is a special property. This records any non-segmentable values that can be referenced later. For example, HTML templates are useful on a segment but are not used to create a segment. There are limits placed onto the size of the data present. This must not exceed 5 MB. This must not exceed 300 event properties. A single string cannot be larger than 100 KB. Each array must not exceed 4000 elements. The properties cannot contain more than 10 nested levels.
        should("test properties") {
            // uncomment below to test the property
            //modelInstance.properties shouldBe ("TODO")
        }

        // to test the property `metric`
        should("test metric") {
            // uncomment below to test the property
            //modelInstance.metric shouldBe ("TODO")
        }

        // to test the property `profile`
        should("test profile") {
            // uncomment below to test the property
            //modelInstance.profile shouldBe ("TODO")
        }

        // to test the property `time` - When this event occurred. By default, the time the request was received will be used. The time is truncated to the second. The time must be after the year 2000 and can only be up to 1 year in the future.
        should("test time") {
            // uncomment below to test the property
            //modelInstance.time shouldBe ("TODO")
        }

        // to test the property ``value`` - A numeric, monetary value to associate with this event. For example, the dollar amount of a purchase.
        should("test `value`") {
            // uncomment below to test the property
            //modelInstance.`value` shouldBe ("TODO")
        }

        // to test the property `valueCurrency` - The ISO 4217 currency code of the value associated with the event.
        should("test valueCurrency") {
            // uncomment below to test the property
            //modelInstance.valueCurrency shouldBe ("TODO")
        }

        // to test the property `uniqueId` - A unique identifier for an event. If the unique_id is repeated for the same profile and metric, only the first processed event will be recorded. If this is not present, this will use the time to the second. Using the default, this limits only one event per profile per second.
        should("test uniqueId") {
            // uncomment below to test the property
            //modelInstance.uniqueId shouldBe ("TODO")
        }

    }
}
